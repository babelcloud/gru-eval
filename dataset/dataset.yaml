tasks:
  - taskId: HumanEval/0
    target: >-
      Check if in given list of numbers, are any two numbers closer to each
      other than given threshold.
    examples:
      - input: 'has_close_elements([1.0, 2.0, 3.0], 0.5)'
        output: 'False'
      - input: 'has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)'
        output: 'True'
    tests:
      - input: '[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3'
        output: 'True'
      - input: '[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05'
        output: 'False'
      - input: '[1.0, 2.0, 5.9, 4.0, 5.0], 0.95'
        output: 'True'
      - input: '[1.0, 2.0, 5.9, 4.0, 5.0], 0.8'
        output: 'False'
      - input: '[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1'
        output: 'True'
      - input: '[1.1, 2.2, 3.1, 4.1, 5.1], 1.0'
        output: 'True'
      - input: '[1.1, 2.2, 3.1, 4.1, 5.1], 0.5'
        output: 'False'
  - taskId: HumanEval/1
    target: >-
      Input to this function is a string containing multiple groups of nested
      parentheses. Your goal is to separate those group into separate strings and return the list of those.
      Separate groups are balanced (each open brace is properly closed) and not nested within each other
      Ignore any spaces in the input string.
    examples:
      - input: separate_paren_groups('( ) (( )) (( )( ))')
        output: '[''()'', ''(())'', ''(()())'']'
    tests:
      - input: '''(()()) ((())) () ((())()())'''
        output: '['
      - input: '''() (()) ((())) (((())))'''
        output: '['
      - input: '''(()(())((())))'''
        output: '['
      - input: '''( ) (( )) (( )( ))'''
        output: '[''()'', ''(())'', ''(()())'']'
  - taskId: HumanEval/2
    target: |-
      Given a positive floating point number, it can be decomposed into
          and integer part (largest integer smaller than given number) and decimals
          (leftover part always smaller than 1).

          Return the decimal part of the number.
    examples:
      - input: truncate_number(3.5)
        output: '0.5'
    tests:
      - input: '3.5'
        output: '0.5'
  - taskId: HumanEval/3
    target: >-
      You're given a list of deposit and withdrawal operations on a bank account
      that starts with
          zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
          at that point function should return True. Otherwise it should return False.
    examples:
      - input: 'below_zero([1, 2, 3])'
        output: 'False'
      - input: 'below_zero([1, 2, -4, 5])'
        output: 'True'
    tests:
      - input: '[]'
        output: 'False'
      - input: '[1, 2, -3, 1, 2, -3]'
        output: 'False'
      - input: '[1, 2, -4, 5, 6]'
        output: 'True'
      - input: '[1, -1, 2, -2, 5, -5, 4, -4]'
        output: 'False'
      - input: '[1, -1, 2, -2, 5, -5, 4, -5]'
        output: 'True'
      - input: '[1, -2, 2, -2, 5, -5, 4, -4]'
        output: 'True'
  - taskId: HumanEval/4
    target: |-
      For a given list of input numbers, calculate Mean Absolute Deviation
          around the mean of this dataset.
          Mean Absolute Deviation is the average absolute difference between each
          element and a centerpoint (mean in this case):
          MAD = average | x - x_mean |
    examples:
      - input: 'mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])'
        output: '1.0'
    tests: 
      - input: '[1.0, 2.0, 3.0, 4.0]'
        output: '1.0'
  - taskId: HumanEval/5
    target: >-
      Insert a number 'delimeter' between every two consecutive elements of
      input list `numbers'
    examples:
      - input: 'intersperse([], 4)'
        output: '[]'
      - input: 'intersperse([1, 2, 3], 4)'
        output: '[1, 4, 2, 4, 3]'
    tests:
      - input: '[], 7'
        output: '[]'
      - input: '[5, 6, 3, 2], 8'
        output: '[5, 8, 6, 8, 3, 8, 2]'
      - input: '[2, 2, 2], 2'
        output: '[2, 2, 2, 2, 2]'
  - taskId: HumanEval/6
    target: >-
      Input to this function is a string represented multiple groups for nested
      parentheses separated by spaces.
          For each of the group, output the deepest level of nesting of parentheses.
          E.g. (()()) has maximum two levels of nesting while ((())) has three.
    examples:
      - input: parse_nested_parens('(()()) ((())) () ((())()())')
        output: '[2, 3, 1, 3]'
    tests:
      - input: '''(()()) ((())) () ((())()())'''
        output: '[2, 3, 1, 3]'
      - input: '''() (()) ((())) (((())))'''
        output: '[1, 2, 3, 4]'
      - input: '''(()(())((())))'''
        output: '[4]'
  - taskId: HumanEval/7
    target: Filter an input list of strings only for ones that contain given substring
    examples:
      - input: 'filter_by_substring([], ''a'')'
        output: '[]'
      - input: 'filter_by_substring([''abc'', ''bacd'', ''cde'', ''array''], ''a'')'
        output: '[''abc'', ''bacd'', ''array'']'
    tests:
      - input: '[], ''john'''
        output: '[]'
      - input: '[''xxx'', ''asd'', ''xxy'', ''john doe'', ''xxxAAA'', ''xxx''], ''xxx'''
        output: '[''xxx'', ''xxxAAA'', ''xxx'']'
      - input: '[''xxx'', ''asd'', ''aaaxxy'', ''john doe'', ''xxxAAA'', ''xxx''], ''xx'''
        output: '[''xxx'', ''aaaxxy'', ''xxxAAA'', ''xxx'']'
      - input: '[''grunt'', ''trumpet'', ''prune'', ''gruesome''], ''run'''
        output: '[''grunt'', ''prune'']'
  - taskId: HumanEval/8
    target: >-
      For a given list of integers, return a tuple consisting of a sum and a
      product of all the integers in a list.
          Empty sum should be equal to 0 and empty product should be equal to 1.
    examples:
      - input: 'sum_product([])'
        output: '(0, 1)'
      - input: 'sum_product([1, 2, 3, 4])'
        output: '(10, 24)'
    tests:
      - input: '[]'
        output: '(0, 1)'
      - input: '[1, 1, 1]'
        output: '(3, 1)'
      - input: '[100, 0]'
        output: '(100, 0)'
      - input: '[3, 5, 7]'
        output: '(3 + 5 + 7, 3 * 5 * 7)'
      - input: '[10]'
        output: '(10, 10)'
  - taskId: HumanEval/9
    target: >-
      From a given list of integers, generate a list of rolling maximum element
      found until given moment
          in the sequence.
    examples:
      - input: 'rolling_max([1, 2, 3, 2, 3, 4, 2])'
        output: '[1, 2, 3, 3, 3, 4, 4]'
    tests:
      - input: '[]'
        output: '[]'
      - input: '[1, 2, 3, 4]'
        output: '[1, 2, 3, 4]'
      - input: '[4, 3, 2, 1]'
        output: '[4, 4, 4, 4]'
      - input: '[3, 2, 3, 100, 3]'
        output: '[3, 3, 3, 100, 100]'
  - taskId: HumanEval/10
    target: >-
      Find the shortest palindrome that begins with a supplied string. 
      Algorithm idea is simple:
      - Find the longest postfix of supplied string that is a palindrome.
      - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    examples:
      - input: 'cat'
        output: 'catac'
      - input: 'cata'
        output: 'catac'
    tests:
      - input: ''''''
        output: ''''''
      - input: '''x'''
        output: '''x'''
      - input: '''xyz'''
        output: '''xyzyx'''
      - input: '''xyx'''
        output: '''xyx'''
      - input: '''jerry'''
        output: '''jerryrrej'''
  - taskId: HumanEval/11
    target: |-
      Input are two strings a and b consisting only of 1s and 0s.
          Perform binary XOR on these inputs and return result also as a string.
    examples:
      - input: 'string_xor(''010'', ''110'')'
        output: '''100'''
    tests:
      - input: '''111000'', ''101010'''
        output: '''010010'''
      - input: '''1'', ''1'''
        output: '''0'''
      - input: '''0101'', ''0000'''
        output: '''0101'''
  - taskId: HumanEval/12
    target: >-
      Out of list of strings, return the longest one. Return the first one in
      case of multiple
          strings of the same length. Return None in case the input list is empty.
    examples:
      - input: 'longest([])'
        output: ''
      - input: 'longest([''a'', ''b'', ''c''])'
        output: '''a'''
      - input: 'longest([''a'', ''bb'', ''ccc''])'
        output: '''ccc'''
    tests:
      - input: '[]'
        output: None
      - input: '[''x'', ''y'', ''z'']'
        output: '''x'''
      - input: '[''x'', ''yyy'', ''zzzz'', ''www'', ''kkkk'', ''abc'']'
        output: '''zzzz'''
  - taskId: HumanEval/13
    target: Return a greatest common divisor of two integers a and b
    examples:
      - input: 'greatest_common_divisor(3, 5)'
        output: '1'
      - input: 'greatest_common_divisor(25, 15)'
        output: '5'
    tests:
      - input: '3, 7'
        output: '1'
      - input: '10, 15'
        output: '5'
      - input: '49, 14'
        output: '7'
      - input: '144, 60'
        output: '12'
  - taskId: HumanEval/14
    target: Return list of all prefixes from shortest to longest of the input string
    examples:
      - input: all_prefixes('abc')
        output: '[''a'', ''ab'', ''abc'']'
    tests:
      - input: ''''''
        output: '[]'
      - input: '''asdfgh'''
        output: '[''a'', ''as'', ''asd'', ''asdf'', ''asdfg'', ''asdfgh'']'
      - input: '''WWW'''
        output: '[''W'', ''WW'', ''WWW'']'
  - taskId: HumanEval/15
    target: >-
      Return a string containing space-delimited numbers starting from 0 upto n
      inclusive.
    examples:
      - input: string_sequence(0)
        output: '''0'''
      - input: string_sequence(5)
        output: '''0 1 2 3 4 5'''
    tests:
      - input: '0'
        output: '''0'''
      - input: '3'
        output: '''0 1 2 3'''
      - input: '10'
        output: '''0 1 2 3 4 5 6 7 8 9 10'''
  - taskId: HumanEval/16
    target: >-
      Given a string, find out how many distinct characters (regardless of case)
      does it consist of
    examples:
      - input: count_distinct_characters('xyzXYZ')
        output: '3'
      - input: count_distinct_characters('Jerry')
        output: '4'
    tests:
      - input: ''''''
        output: '0'
      - input: '''abcde'''
        output: '5'
      - input: '''abcde'' + ''cade'' + ''CADE'''
        output: '5'
      - input: '''aaaaAAAAaaaa'''
        output: '1'
      - input: '''Jerry jERRY JeRRRY'''
        output: '5'
  - taskId: HumanEval/17
    target: >-
      Input to this function is a string representing musical notes in a special
      ASCII format.
          Your task is to parse this string and return list of integers corresponding to how many beats does each
          not last.

          Here is a legend:
          'o' - whole note, lasts four beats
          'o|' - half note, lasts two beats
          '.|' - quater note, lasts one beat
    examples:
      - input: parse_music('o o| .| o| o| .| .| .| .| o o')
        output: '[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]'
    tests:
      - input: ''''''
        output: '[]'
      - input: '''o o o o'''
        output: '[4, 4, 4, 4]'
      - input: '''.| .| .| .|'''
        output: '[1, 1, 1, 1]'
      - input: '''o| o| .| .| o o o o'''
        output: '[2, 2, 1, 1, 4, 4, 4, 4]'
      - input: '''o| .| o| .| o o| o o|'''
        output: '[2, 1, 2, 1, 4, 2, 4, 2]'
  - taskId: HumanEval/18
    target: >-
      Find how many times a given substring can be found in the original string.
      Count overlaping cases.
    examples:
      - input: 'how_many_times('''', ''a'')'
        output: '0'
      - input: 'how_many_times(''aaa'', ''a'')'
        output: '3'
      - input: 'how_many_times(''aaaa'', ''aa'')'
        output: '3'
    tests:
      - input: ''''', ''x'''
        output: '0'
      - input: '''xyxyxyx'', ''x'''
        output: '4'
      - input: '''cacacacac'', ''cac'''
        output: '4'
      - input: '''john doe'', ''john'''
        output: '1'
  - taskId: HumanEval/19
    target: |-
      Input is a space-delimited string of numberals from 'zero' to 'nine'.
          Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
          Return the string with numbers sorted from smallest to largest
    examples:
      - input: sort_numbers('three one five')
        output: '''one three five'''
    tests:
      - input: ''''''
        output: ''''''
      - input: '''three'''
        output: '''three'''
      - input: '''three five nine'''
        output: '''three five nine'''
      - input: '''five zero four seven nine eight'''
        output: '''zero four five seven eight nine'''
      - input: '''six five four three two one zero'''
        output: '''zero one two three four five six'''
  - taskId: HumanEval/20
    target: >-
      From a supplied list of numbers (of length at least two) select and return
      two that are the closest to each
          other and return them in order (smaller number, larger number).
    examples:
      - input: 'find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])'
        output: '(2.0, 2.2)'
      - input: 'find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])'
        output: '(2.0, 2.0)'
    tests:
      - input: '[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]'
        output: '(3.9, 4.0)'
      - input: '[1.0, 2.0, 5.9, 4.0, 5.0]'
        output: '(5.0, 5.9)'
      - input: '[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]'
        output: '(2.0, 2.2)'
      - input: '[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]'
        output: '(2.0, 2.0)'
      - input: '[1.1, 2.2, 3.1, 4.1, 5.1]'
        output: '(2.2, 3.1)'
  - taskId: HumanEval/21
    target: >-
      Given list of numbers (of at least two elements), apply a linear transform
      to that list,
          such that the smallest number will become 0 and the largest will become 1
    examples:
      - input: 'rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])'
        output: '[0.0, 0.25, 0.5, 0.75, 1.0]'
    tests:
      - input: '[2.0, 49.9]'
        output: '[0.0, 1.0]'
      - input: '[100.0, 49.9]'
        output: '[1.0, 0.0]'
      - input: '[1.0, 2.0, 3.0, 4.0, 5.0]'
        output: '[0.0, 0.25, 0.5, 0.75, 1.0]'
      - input: '[2.0, 1.0, 5.0, 3.0, 4.0]'
        output: '[0.25, 0.0, 1.0, 0.5, 0.75]'
      - input: '[12.0, 11.0, 15.0, 13.0, 14.0]'
        output: '[0.25, 0.0, 1.0, 0.5, 0.75]'
  - taskId: HumanEval/22
    target: Filter given list of any python values only for integers
    examples:
      - input: 'filter_integers([''a'', 3.14, 5])'
        output: '[5]'
      - input: 'filter_integers([1, 2, 3, ''abc'', {}, []])'
        output: '[1, 2, 3]'
    tests:
      - input: '[]'
        output: '[]'
      - input: '[4, {}, [], 23.2, 9, ''adasd'']'
        output: '[4, 9]'
      - input: '[3, ''c'', 3, 3, ''a'', ''b'']'
        output: '[3, 3, 3]'
  - taskId: HumanEval/23
    target: Return length of given string
    examples:
      - input: strlen('')
        output: '0'
      - input: strlen('abc')
        output: '3'
    tests:
      - input: ''''''
        output: '0'
      - input: '''x'''
        output: '1'
      - input: '''asdasnakj'''
        output: '9'
  - taskId: HumanEval/24
    target: >-
      For a given number n, find the largest number that divides n evenly,
      smaller than n
    examples:
      - input: largest_divisor(15)
        output: '5'
    tests:
      - input: '3'
        output: '1'
      - input: '7'
        output: '1'
      - input: '10'
        output: '5'
      - input: '100'
        output: '50'
      - input: '49'
        output: '7'
  - taskId: HumanEval/25
    target: >-
      Return list of prime factors of given integer in the order from smallest
      to largest.
          Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
          Input number should be equal to the product of all factors
    examples:
      - input: factorize(8)
        output: '[2, 2, 2]'
      - input: factorize(25)
        output: '[5, 5]'
      - input: factorize(70)
        output: '[2, 5, 7]'
    tests:
      - input: '2'
        output: '[2]'
      - input: '4'
        output: '[2, 2]'
      - input: '8'
        output: '[2, 2, 2]'
      - input: 3 * 19
        output: '[3, 19]'
      - input: 3 * 19 * 3 * 19
        output: '[3, 3, 19, 19]'
      - input: 3 * 19 * 3 * 19 * 3 * 19
        output: '[3, 3, 3, 19, 19, 19]'
      - input: 3 * 19 * 19 * 19
        output: '[3, 19, 19, 19]'
      - input: 3 * 2 * 3
        output: '[2, 3, 3]'
  - taskId: HumanEval/26
    target: |-
      From a list of integers, remove all elements that occur more than once.
          Keep order of elements left the same as in the input.
    examples:
      - input: 'remove_duplicates([1, 2, 3, 2, 4])'
        output: '[1, 3, 4]'
    tests:
      - input: '[]'
        output: '[]'
      - input: '[1, 2, 3, 4]'
        output: '[1, 2, 3, 4]'
      - input: '[1, 2, 3, 2, 4, 3, 5]'
        output: '[1, 4, 5]'
  - taskId: HumanEval/27
    target: >-
      For a given string, flip lowercase characters to uppercase and uppercase
      to lowercase.
    examples:
      - input: flip_case('Hello')
        output: '''hELLO'''
    tests:
      - input: ''''''
        output: ''''''
      - input: '''Hello!'''
        output: '''hELLO!'''
      - input: '''These violent delights have violent ends'''
        output: '''tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'''
  - taskId: HumanEval/28
    target: Concatenate list of strings into a single string
    examples:
      - input: 'concatenate([])'
        output: ''''''
      - input: 'concatenate([''a'', ''b'', ''c''])'
        output: '''abc'''
    tests:
      - input: '[]'
        output: ''''''
      - input: '[''x'', ''y'', ''z'']'
        output: '''xyz'''
      - input: '[''x'', ''y'', ''z'', ''w'', ''k'']'
        output: '''xyzwk'''
  - taskId: HumanEval/29
    target: >-
      Filter an input list of strings only for ones that start with a given
      prefix.
    examples:
      - input: 'filter_by_prefix([], ''a'')'
        output: '[]'
      - input: 'filter_by_prefix([''abc'', ''bcd'', ''cde'', ''array''], ''a'')'
        output: '[''abc'', ''array'']'
    tests:
      - input: '[], ''john'''
        output: '[]'
      - input: '[''xxx'', ''asd'', ''xxy'', ''john doe'', ''xxxAAA'', ''xxx''], ''xxx'''
        output: '[''xxx'', ''xxxAAA'', ''xxx'']'
  - taskId: HumanEval/30
    target: Return only positive numbers in the list.
    examples:
      - input: 'get_positive([-1, 2, -4, 5, 6])'
        output: '[2, 5, 6]'
      - input: 'get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])'
        output: '[5, 3, 2, 3, 9, 123, 1]'
    tests:
      - input: '[-1, -2, 4, 5, 6]'
        output: '[4, 5, 6]'
      - input: '[5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]'
        output: '[5, 3, 2, 3, 3, 9, 123, 1]'
      - input: '[-1, -2]'
        output: '[]'
      - input: '[]'
        output: '[]'
  - taskId: HumanEval/31
    target: 'Return true if a given number is prime, and false otherwise.'
    examples:
      - input: is_prime(6)
        output: 'False'
      - input: is_prime(101)
        output: 'True'
      - input: is_prime(11)
        output: 'True'
      - input: is_prime(13441)
        output: 'True'
      - input: is_prime(61)
        output: 'True'
      - input: is_prime(4)
        output: 'False'
      - input: is_prime(1)
        output: 'False'
    tests:
      - input: '6'
        output: 'False'
      - input: '101'
        output: 'True'
      - input: '11'
        output: 'True'
      - input: '13441'
        output: 'True'
      - input: '61'
        output: 'True'
      - input: '4'
        output: 'False'
      - input: '1'
        output: 'False'
      - input: '5'
        output: 'True'
      - input: '11'
        output: 'True'
      - input: '17'
        output: 'True'
      - input: 5 * 17
        output: 'False'
      - input: 11 * 7
        output: 'False'
      - input: 13441 * 19
        output: 'False'
  - taskId: HumanEval/32
    target: |-
       function poly(xs: number[], x: number): number {
        // Evaluates polynomial with coefficients xs at point x.
        // return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
        return xs.reduce((sum, coeff, i) => sum + coeff * Math.pow(x, i), 0);
       }
       xs are coefficients of a polynomial.
       find_zero find x such that poly(x) = 0.
       find_zero returns only one zero point, even if there are many.
       Moreover, find_zero only takes list xs having even number of coefficients
       and largest non-zero coefficient as it guarantees a solution.
    examples:
      - input: 'find_zero([1, 2])'
        output: '-0.5'
      - input: '[-6,11, -6, 1]'
        output: '1.0'
    tests: []
  - taskId: HumanEval/33
    target: |-
      This function takes a list l and returns a list l' such that
          l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
          to the values of the corresponding indicies of l, but sorted.
    examples:
      - input: 'sort_third([1, 2, 3])'
        output: '[1, 2, 3]'
      - input: 'sort_third([5, 6, 3, 4, 8, 9, 2])'
        output: '[2, 6, 3, 4, 8, 9, 5]'
    tests:
      - input: '[5,6,3,4,8,9,2, 1]'
        output: '[2,6,3,4,8,9,5, 1]'
      - input: '[5,8,3,4,6,9, 2]'
        output: '[2,8,3,4,6,9, 5]'
  - taskId: HumanEval/34
    target: Return sorted unique elements in a list
    examples:
      - input: 'unique([5, 3, 5, 2, 3, 3, 9, 0, 123])'
        output: '[0, 2, 3, 5, 9, 123]'
    tests:
      - input: '[5, 3, 5, 2, 3, 3, 9, 0, 123]'
        output: '[0, 2, 3, 5, 9, 123]'
  - taskId: HumanEval/35
    target: Return maximum element in the list.
    examples:
      - input: 'max_element([1, 2, 3])'
        output: '3'
      - input: 'max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])'
        output: '123'
    tests:
      - input: '[1, 2, 3]'
        output: '3'
      - input: '[5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]'
        output: '124'
  - taskId: HumanEval/36
    target: >-
      Return the number of times the digit 7 appears in integers less than n
      which are divisible by 11 or 13.
    examples:
      - input: fizz_buzz(50)
        output: '0'
      - input: fizz_buzz(78)
        output: '2'
      - input: fizz_buzz(79)
        output: '3'
    tests:
      - input: '50'
        output: '0'
      - input: '78'
        output: '2'
      - input: '79'
        output: '3'
      - input: '100'
        output: '3'
      - input: '200'
        output: '6'
      - input: '4000'
        output: '192'
      - input: '10000'
        output: '639'
      - input: '100000'
        output: '8026'
  - taskId: HumanEval/37
    target: |-
      This function takes a list l and returns a list l' such that
          l' is identical to l in the odd indicies, while its values at the even indicies are equal
          to the values of the even indicies of l, but sorted.
    examples:
      - input: 'sort_even([1, 2, 3])'
        output: '[1, 2, 3]'
      - input: 'sort_even([5, 6, 3, 4])'
        output: '[3, 6, 5, 4]'
    tests:
      - input: '[5,8, -12,4,23,2,3,11,12, -10]'
        output: '[-12,8,3,4,5,2,12,11,23, -10]'
      - input: '[5,3, -5,2, -3,3,9,0,123,1, -10]'
        output: '[-10,3, -5,2, -3,3,5,0,9,1, 123]'
  - taskId: HumanEval/38
    target: returns encoded string by cycling groups of three characters.
    examples: []
    tests:
      - input: encoded_str
        output: str
  - taskId: HumanEval/39
    target: >-
      prime_fib returns n-th number that is a Fibonacci number and it's also
      prime.
    examples:
      - input: prime_fib(1)
        output: '2'
      - input: prime_fib(2)
        output: '3'
      - input: prime_fib(3)
        output: '5'
      - input: prime_fib(4)
        output: '13'
      - input: prime_fib(5)
        output: '89'
    tests:
      - input: '1'
        output: '2'
      - input: '2'
        output: '3'
      - input: '3'
        output: '5'
      - input: '4'
        output: '13'
      - input: '5'
        output: '89'
      - input: '6'
        output: '233'
      - input: '7'
        output: '1597'
      - input: '8'
        output: '28657'
      - input: '9'
        output: '514229'
      - input: '10'
        output: '433494437'
  - taskId: HumanEval/40
    target: |-
      triples_sum_to_zero takes a list of integers as an input.
          it returns True if there are three distinct elements in the list that
          sum to zero, and False otherwise.
    examples:
      - input: 'triples_sum_to_zero([1, 3, 5, 0])'
        output: 'False'
      - input: 'triples_sum_to_zero([1, 3, -2, 1])'
        output: 'True'
      - input: 'triples_sum_to_zero([1, 2, 3, 7])'
        output: 'False'
      - input: 'triples_sum_to_zero([2, 4, -5, 3, 9, 7])'
        output: 'True'
      - input: 'triples_sum_to_zero([1])'
        output: 'False'
    tests:
      - input: '[1, 3, 5, 0]'
        output: 'False'
      - input: '[1, 3, 5, -1]'
        output: 'False'
      - input: '[1, 3, -2, 1]'
        output: 'True'
      - input: '[1, 2, 3, 7]'
        output: 'False'
      - input: '[1, 2, 5, 7]'
        output: 'False'
      - input: '[2, 4, -5, 3, 9, 7]'
        output: 'True'
      - input: '[1]'
        output: 'False'
      - input: '[1, 3, 5, -100]'
        output: 'False'
      - input: '[100, 3, 5, -100]'
        output: 'False'
  - taskId: HumanEval/41
    target: |-
      Imagine a road that's a perfectly straight infinitely long line.
          n cars are driving left to right;  simultaneously, a different set of n cars
          are driving right to left.   The two sets of cars start out being very far from
          each other.  All cars move in the same speed.  Two cars are said to collide
          when a car that's moving left to right hits a car that's moving right to left.
          However, the cars are infinitely sturdy and strong; as a result, they continue moving
          in their trajectory as if they did not collide.

          This function outputs the number of such collisions.
    examples: []
    tests:
      - input: '2'
        output: '4'
      - input: '3'
        output: '9'
      - input: '4'
        output: '16'
      - input: '8'
        output: '64'
      - input: '10'
        output: '100'
  - taskId: HumanEval/42
    target: Return list with elements incremented by 1.
    examples:
      - input: 'incr_list([1, 2, 3])'
        output: '[2, 3, 4]'
      - input: 'incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])'
        output: '[6, 4, 6, 3, 4, 4, 10, 1, 124]'
    tests:
      - input: '[]'
        output: '[]'
      - input: '[3, 2, 1]'
        output: '[4, 3, 2]'
      - input: '[5, 2, 5, 2, 3, 3, 9, 0, 123]'
        output: '[6, 3, 6, 3, 4, 4, 10, 1, 124]'
  - taskId: HumanEval/43
    target: |-
      pairs_sum_to_zero takes a list of integers as an input.
          it returns True if there are two distinct elements in the list that
          sum to zero, and False otherwise.
    examples:
      - input: 'pairs_sum_to_zero([1, 3, 5, 0])'
        output: 'False'
      - input: 'pairs_sum_to_zero([1, 3, -2, 1])'
        output: 'False'
      - input: 'pairs_sum_to_zero([1, 2, 3, 7])'
        output: 'False'
      - input: 'pairs_sum_to_zero([2, 4, -5, 3, 5, 7])'
        output: 'True'
      - input: 'pairs_sum_to_zero([1])'
        output: 'False'
    tests:
      - input: '[1, 3, 5, 0]'
        output: 'False'
      - input: '[1, 3, -2, 1]'
        output: 'False'
      - input: '[1, 2, 3, 7]'
        output: 'False'
      - input: '[2, 4, -5, 3, 5, 7]'
        output: 'True'
      - input: '[1]'
        output: 'False'
      - input: '[-3, 9, -1, 3, 2, 30]'
        output: 'True'
      - input: '[-3, 9, -1, 3, 2, 31]'
        output: 'True'
      - input: '[-3, 9, -1, 4, 2, 30]'
        output: 'False'
      - input: '[-3, 9, -1, 4, 2, 31]'
        output: 'False'
  - taskId: HumanEval/44
    target: |-
      Change numerical base of input number x to base.
          return string representation after the conversion.
          base numbers are less than 10.
    examples:
      - input: 'change_base(8, 3)'
        output: '''22'''
      - input: 'change_base(8, 2)'
        output: '''1000'''
      - input: 'change_base(7, 2)'
        output: '''111'''
    tests:
      - input: '8, 3'
        output: '"22"'
      - input: '9, 3'
        output: '"100"'
      - input: '234, 2'
        output: '"11101010"'
      - input: '16, 2'
        output: '"10000"'
      - input: '8, 2'
        output: '"1000"'
      - input: '7, 2'
        output: '"111"'
      - input: 'x, x + 1'
        output: str(x)
  - taskId: HumanEval/45
    target: Given length of a side and high return area for a triangle.
    examples:
      - input: 'triangle_area(5, 3)'
        output: '7.5'
    tests:
      - input: '5, 3'
        output: '7.5'
      - input: '2, 2'
        output: '2.0'
      - input: '10, 8'
        output: '40.0'
  - taskId: HumanEval/46
    target: >-
      The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece
      that's defined as follows:
          fib4(0) -> 0
          fib4(1) -> 0
          fib4(2) -> 2
          fib4(3) -> 0
          fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
          Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    examples:
      - input: fib4(5)
        output: '4'
      - input: fib4(6)
        output: '8'
      - input: fib4(7)
        output: '14'
    tests:
      - input: '5'
        output: '4'
      - input: '8'
        output: '28'
      - input: '10'
        output: '104'
      - input: '12'
        output: '386'
  - taskId: HumanEval/47
    target: Return median of elements in the list l.
    examples:
      - input: 'median([3, 1, 2, 4, 5])'
        output: '3'
      - input: 'median([-10, 4, 6, 1000, 10, 20])'
        output: '15.0'
    tests:
      - input: '[3, 1, 2, 4, 5]'
        output: '3'
      - input: '[-10, 4, 6, 1000, 10, 20]'
        output: '8.0'
      - input: '[5]'
        output: '5'
      - input: '[6, 5]'
        output: '5.5'
      - input: '[8, 1, 3, 9, 9, 2, 7]'
        output: '7 '
  - taskId: HumanEval/48
    target: Checks if given string is a palindrome
    examples:
      - input: is_palindrome('')
        output: 'True'
      - input: is_palindrome('aba')
        output: 'True'
      - input: is_palindrome('aaaaa')
        output: 'True'
      - input: is_palindrome('zbcd')
        output: 'False'
    tests:
      - input: ''''''
        output: 'True'
      - input: '''aba'''
        output: 'True'
      - input: '''aaaaa'''
        output: 'True'
      - input: '''zbcd'''
        output: 'False'
      - input: '''xywyx'''
        output: 'True'
      - input: '''xywyz'''
        output: 'False'
      - input: '''xywzx'''
        output: 'False'
  - taskId: HumanEval/49
    target: Return 2^n modulo p (be aware of numerics).
    examples:
      - input: 'modp(3, 5)'
        output: '3'
      - input: 'modp(1101, 101)'
        output: '2'
      - input: 'modp(0, 101)'
        output: '1'
      - input: 'modp(3, 11)'
        output: '8'
      - input: 'modp(100, 101)'
        output: '1'
    tests:
      - input: '3, 5'
        output: '3'
      - input: '1101, 101'
        output: '2'
      - input: '0, 101'
        output: '1'
      - input: '3, 11'
        output: '8'
      - input: '100, 101'
        output: '1'
      - input: '30, 5'
        output: '4'
      - input: '31, 5'
        output: '3'
  - taskId: HumanEval/50
    target: returns encoded string by shifting every character by 5 in the alphabet.
    examples: []
    tests:
      - input: copy.deepcopy(encoded_str)
        output: str
  - taskId: HumanEval/51
    target: >-
      remove_vowels is a function that takes string and returns string without
      vowels.
    examples:
      - input: remove_vowels('')
        output: ''''''
      - input: remove_vowels("abcdef\nghijklm")
        output: '''bcdf\nghjklm'''
      - input: remove_vowels('abcdef')
        output: '''bcdf'''
      - input: remove_vowels('aaaaa')
        output: ''''''
      - input: remove_vowels('aaBAA')
        output: '''B'''
      - input: remove_vowels('zbcd')
        output: '''zbcd'''
    tests:
      - input: ''''''
        output: ''''''
      - input: '"abcdef\nghijklm"'
        output: '''bcdf\nghjklm'''
      - input: '''fedcba'''
        output: '''fdcb'''
      - input: '''eeeee'''
        output: ''''''
      - input: '''acBAA'''
        output: '''cB'''
      - input: '''EcBOO'''
        output: '''cB'''
      - input: '''ybcd'''
        output: '''ybcd'''
  - taskId: HumanEval/52
    target: Return True if all numbers in the list l are below threshold t.
    examples:
      - input: 'below_threshold([1, 2, 4, 10], 100)'
        output: 'True'
      - input: 'below_threshold([1, 20, 4, 10], 5)'
        output: 'False'
    tests: []
  - taskId: HumanEval/53
    target: Add two numbers x and y
    examples:
      - input: 'add(2, 3)'
        output: '5'
      - input: 'add(5, 7)'
        output: '12'
    tests:
      - input: '0, 1'
        output: '1'
      - input: '1, 0'
        output: '1'
      - input: '2, 3'
        output: '5'
      - input: '5, 7'
        output: '12'
      - input: '7, 5'
        output: '12'
      - input: 'x, y'
        output: x + y
  - taskId: HumanEval/54
    target: Check if two words have the same characters.
    examples:
      - input: 'same_chars(''eabcdzzzz'', ''dddzzzzzzzddeddabc'')'
        output: 'True'
      - input: 'same_chars(''abcd'', ''dddddddabc'')'
        output: 'True'
      - input: 'same_chars(''dddddddabc'', ''abcd'')'
        output: 'True'
      - input: 'same_chars(''eabcd'', ''dddddddabc'')'
        output: 'False'
      - input: 'same_chars(''abcd'', ''dddddddabce'')'
        output: 'False'
      - input: 'same_chars(''eabcdzzzz'', ''dddzzzzzzzddddabc'')'
        output: 'False'
    tests:
      - input: '''eabcdzzzz'', ''dddzzzzzzzddeddabc'''
        output: 'True'
      - input: '''abcd'', ''dddddddabc'''
        output: 'True'
      - input: '''dddddddabc'', ''abcd'''
        output: 'True'
      - input: '''eabcd'', ''dddddddabc'''
        output: 'False'
      - input: '''abcd'', ''dddddddabcf'''
        output: 'False'
      - input: '''eabcdzzzz'', ''dddzzzzzzzddddabc'''
        output: 'False'
      - input: '''aabb'', ''aaccc'''
        output: 'False'
  - taskId: HumanEval/55
    target: Return n-th Fibonacci number.
    examples:
      - input: fib(10)
        output: '55'
      - input: fib(1)
        output: '1'
      - input: fib(8)
        output: '21'
    tests:
      - input: '10'
        output: '55'
      - input: '1'
        output: '1'
      - input: '8'
        output: '21'
      - input: '11'
        output: '89'
      - input: '12'
        output: '144'
  - taskId: HumanEval/56
    target: |-
      brackets is a string of "<" and ">".
          return True if every opening bracket has a corresponding closing bracket.
    examples:
      - input: correct_bracketing("<")
        output: 'False'
      - input: correct_bracketing("<>")
        output: 'True'
      - input: correct_bracketing("<<><>>")
        output: 'True'
      - input: correct_bracketing("><<>")
        output: 'False'
    tests: []
  - taskId: HumanEval/57
    target: Return True is list elements are monotonically increasing or decreasing.
    examples:
      - input: 'monotonic([1, 2, 4, 20])'
        output: 'True'
      - input: 'monotonic([1, 20, 4, 10])'
        output: 'False'
      - input: 'monotonic([4, 1, 0, -10])'
        output: 'True'
    tests:
      - input: '[1, 2, 4, 10]'
        output: 'True'
      - input: '[1, 2, 4, 20]'
        output: 'True'
      - input: '[1, 20, 4, 10]'
        output: 'False'
      - input: '[4, 1, 0, -10]'
        output: 'True'
      - input: '[4, 1, 1, 0]'
        output: 'True'
      - input: '[1, 2, 3, 2, 5, 60]'
        output: 'False'
      - input: '[1, 2, 3, 4, 5, 60]'
        output: 'True'
      - input: '[9, 9, 9, 9]'
        output: 'True'
  - taskId: HumanEval/58
    target: Return sorted unique common elements for two lists.
    examples:
      - input: 'common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])'
        output: '[1, 5, 653]'
      - input: 'common([5, 3, 2, 8], [3, 2])'
        output: '[2, 3]'
    tests:
      - input: '[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]'
        output: '[1, 5, 653]'
      - input: '[5, 3, 2, 8], [3, 2]'
        output: '[2, 3]'
      - input: '[4, 3, 2, 8], [3, 2, 4]'
        output: '[2, 3, 4]'
      - input: '[4, 3, 2, 8], []'
        output: '[]'
  - taskId: HumanEval/59
    target: Return the largest prime factor of n. Assume n > 1 and is not a prime.
    examples:
      - input: largest_prime_factor(13195)
        output: '29'
      - input: largest_prime_factor(2048)
        output: '2'
    tests:
      - input: '15'
        output: '5'
      - input: '27'
        output: '3'
      - input: '63'
        output: '7'
      - input: '330'
        output: '11'
      - input: '13195'
        output: '29'
  - taskId: HumanEval/60
    target: sum_to_n is a function that sums numbers from 1 to n.
    examples:
      - input: sum_to_n(30)
        output: '465'
      - input: sum_to_n(100)
        output: '5050'
      - input: sum_to_n(5)
        output: '15'
      - input: sum_to_n(10)
        output: '55'
      - input: sum_to_n(1)
        output: '1'
    tests:
      - input: '1'
        output: '1'
      - input: '6'
        output: '21'
      - input: '11'
        output: '66'
      - input: '30'
        output: '465'
      - input: '100'
        output: '5050'
  - taskId: HumanEval/61
    target: |-
      brackets is a string of "(" and ")".
          return True if every opening bracket has a corresponding closing bracket.
    examples:
      - input: correct_bracketing("(")
        output: 'False'
      - input: correct_bracketing("()")
        output: 'True'
      - input: correct_bracketing("(()())")
        output: 'True'
      - input: correct_bracketing(")(()")
        output: 'False'
    tests: []
  - taskId: HumanEval/62
    target: |-
      xs represent coefficients of a polynomial.
          xs[0] + xs[1] * x + xs[2] * x^2 + ....
           Return derivative of this polynomial in the same form.
    examples:
      - input: 'derivative([3, 1, 2, 4, 5])'
        output: '[1, 4, 12, 20]'
      - input: 'derivative([1, 2, 3])'
        output: '[2, 6]'
    tests:
      - input: '[3, 1, 2, 4, 5]'
        output: '[1, 4, 12, 20]'
      - input: '[1, 2, 3]'
        output: '[2, 6]'
      - input: '[3, 2, 1]'
        output: '[2, 2]'
      - input: '[3, 2, 1, 0, 4]'
        output: '[2, 2, 0, 16]'
      - input: '[1]'
        output: '[]'
  - taskId: HumanEval/63
    target: >-
      The FibFib number sequence is a sequence similar to the Fibbonacci
      sequnece that's defined as follows:
          fibfib(0) == 0
          fibfib(1) == 0
          fibfib(2) == 1
          fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
          Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    examples:
      - input: fibfib(1)
        output: '0'
      - input: fibfib(5)
        output: '4'
      - input: fibfib(8)
        output: '24'
    tests:
      - input: '2'
        output: '1'
      - input: '1'
        output: '0'
      - input: '5'
        output: '4'
      - input: '8'
        output: '24'
      - input: '10'
        output: '81'
      - input: '12'
        output: '274'
      - input: '14'
        output: '927'
  - taskId: HumanEval/64
    target: Add more test cases.
    examples: []
    tests:
      - input: '"abcde"'
        output: '2, "Test 1"'
      - input: '"Alone"'
        output: '3, "Test 2"'
      - input: '"key"'
        output: '2, "Test 3"'
      - input: '"bye"'
        output: '1, "Test 4"'
      - input: '"keY"'
        output: '2, "Test 5"'
      - input: '"bYe"'
        output: '1, "Test 6"'
      - input: '"ACEDY"'
        output: '3, "Test 7"'
  - taskId: HumanEval/65
    target: >-
      Circular shift the digits of the integer x, shift the digits right by
      shift
          and return the result as a string.
          If shift > number of digits, return digits reversed.
    examples:
      - input: 'circular_shift(12, 1)'
        output: '"21"'
      - input: 'circular_shift(12, 2)'
        output: '"12"'
    tests:
      - input: '100, 2'
        output: '"001"'
      - input: '12, 2'
        output: '"12"'
      - input: '97, 8'
        output: '"79"'
      - input: '12, 1'
        output: '"21", "This prints if this assert fails 1 (good for debugging!)"'
      - input: '11, 101'
        output: '"11", "This prints if this assert fails 2 (also good for debugging!)"'
  - taskId: HumanEval/66
    target: |-
      Task
          Write a function that takes a string as input and returns the sum of the upper characters only'
          ASCII codes.

          Examples:
              digitSum("") => 0
              digitSum("abAB") => 131
              digitSum("abcCd") => 67
              digitSum("helloE") => 69
              digitSum("woArBld") => 131
              digitSum("aAaaaXa") => 153
    examples: []
    tests:
      - input: '""'
        output: '0, "Error"'
      - input: '"abAB"'
        output: '131, "Error"'
      - input: '"abcCd"'
        output: '67, "Error"'
      - input: '"helloE"'
        output: '69, "Error"'
      - input: '"woArBld"'
        output: '131, "Error"'
      - input: '"aAaaaXa"'
        output: '153, "Error"'
      - input: '" How are yOu?"'
        output: '151, "Error"'
      - input: '"You arE Very Smart"'
        output: '327, "Error"'
  - taskId: HumanEval/67
    target: >-
      In this task, you will be given a string that represents a number of
      apples and oranges 
          that are distributed in a basket of fruit this basket contains 
          apples, oranges, and mango fruits. Given the string that represents the total number of 
          the oranges and apples and an integer that represent the total number of the fruits 
          in the basket return the number of the mango fruits in the basket.
          for examble:
          fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
          fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
          fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
          fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    examples: []
    tests:
      - input: '"5 apples and 6 oranges",19'
        output: '8'
      - input: '"5 apples and 6 oranges",21'
        output: '10'
      - input: '"0 apples and 1 oranges",3'
        output: '2'
      - input: '"1 apples and 0 oranges",3'
        output: '2'
      - input: '"2 apples and 3 oranges",100'
        output: '95'
      - input: '"2 apples and 3 oranges",5'
        output: '0'
      - input: '"1 apples and 100 oranges",120'
        output: '19'
  - taskId: HumanEval/68
    target: >-
      "Given an array representing a branch of a tree that has non-negative
      integer nodes
          your task is to pluck one of the nodes and return it.
          The plucked node should be the node with the smallest even value.
          If multiple nodes with the same smallest even value are found return the node that has smallest index.

          The plucked node should be returned in a list, [ smalest_value, its index ],
          If there are no even values or the given array is empty, return [].

          Example 1:
              Input: [4,2,3]
              Output: [2, 1]
              Explanation: 2 has the smallest even value, and 2 has the smallest index.

          Example 2:
              Input: [1,2,3]
              Output: [2, 1]
              Explanation: 2 has the smallest even value, and 2 has the smallest index. 

          Example 3:
              Input: []
              Output: []
          
          Example 4:
              Input: [5, 0, 3, 0, 4, 2]
              Output: [0, 1]
              Explanation: 0 is the smallest value, but  there are two zeros,
                           so we will choose the first zero, which has the smallest index.

          Constraints:
              * 1 <= nodes.length <= 10000
              * 0 <= node.value
    examples: []
    tests:
      - input: '[4,2,3]'
        output: '[2, 1], "Error"'
      - input: '[1,2,3]'
        output: '[2, 1], "Error"'
      - input: '[]'
        output: '[], "Error"'
      - input: '[5, 0, 3, 0, 4, 2]'
        output: '[0, 1], "Error"'
      - input: '[1, 2, 3, 0, 5, 3]'
        output: '[0, 3], "Error"'
      - input: '[5, 4, 8, 4 ,8]'
        output: '[4, 1], "Error"'
      - input: '[7, 6, 7, 1]'
        output: '[6, 1], "Error"'
      - input: '[7, 9, 7, 1]'
        output: '[], "Error"'
  - taskId: HumanEval/69
    tests:
      - input: '[5, 5, 5, 5, 1]'
        output: '1'
      - input: '[4, 1, 4, 1, 4, 4]'
        output: '4'
      - input: '[3, 3]'
        output: '-1'
      - input: '[8, 8, 8, 8, 8, 8, 8, 8]'
        output: '8'
      - input: '[2, 3, 3, 2, 2]'
        output: '2'
      - input: '[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]'
        output: '1'
      - input: '[3, 2, 8, 2]'
        output: '2'
      - input: '[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]'
        output: '1'
      - input: '[8, 8, 3, 6, 5, 6, 4]'
        output: '-1'
      - input: >-
          [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9,
          5, 7, 9]
        output: '1'
      - input: '[1, 9, 10, 1, 3]'
        output: '1'
      - input: >-
          [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5,
          3, 10]
        output: '5'
      - input: '[1]'
        output: '1'
      - input: >-
          [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1,
          5]
        output: '4'
      - input: '[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]'
        output: '2'
      - input: '[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]'
        output: '1'
      - input: >-
          [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9,
          10, 7, 10, 2, 8, 10, 9, 4]
        output: '4'
      - input: >-
          [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10,
          7]
        output: '4'
      - input: '[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]'
        output: '2'
      - input: '[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]'
        output: '-1'
      - input: '[10]'
        output: '-1'
      - input: '[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]'
        output: '2'
      - input: '[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]'
        output: '1'
      - input: '[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]'
        output: '1'
      - input: '[3, 10, 10, 9, 2]'
        output: '-1'
  - taskId: HumanEval/70
    tests:
      - input: '[1, 2, 3, 4]'
        output: '[1, 4, 2, 3]'
      - input: '[5, 6, 7, 8, 9]'
        output: '[5, 9, 6, 8, 7]'
      - input: '[1, 2, 3, 4, 5]'
        output: '[1, 5, 2, 4, 3]'
      - input: '[5, 6, 7, 8, 9, 1]'
        output: '[1, 9, 5, 8, 6, 7]'
      - input: '[5, 5, 5, 5]'
        output: '[5, 5, 5, 5]'
      - input: '[]'
        output: '[]'
      - input: '[1,2,3,4,5,6,7,8]'
        output: '[1, 8, 2, 7, 3, 6, 4, 5]'
      - input: '[0,2,2,2,5,5,-5,-5]'
        output: '[-5, 5, -5, 5, 0, 2, 2, 2]'
      - input: '[111111]'
        output: '[111111]'
  - taskId: HumanEval/71
    tests:
      - input: '3, 4, 5'
        output: '6.00, "This prints if this assert fails 1 (good for debugging!)"'
      - input: '1, 2, 10'
        output: '-1'
      - input: '4, 8, 5'
        output: '8.18'
      - input: '2, 2, 2'
        output: '1.73'
      - input: '1, 2, 3'
        output: '-1'
      - input: '10, 5, 7'
        output: '16.25'
      - input: '2, 6, 3'
        output: '-1'
      - input: '1, 1, 1'
        output: '0.43, "This prints if this assert fails 2 (also good for debugging!)"'
      - input: '2, 2, 10'
        output: '-1'
  - taskId: HumanEval/72
    tests: []
  - taskId: HumanEval/73
    target: |-
      Given an array arr of integers, find the minimum number of elements that
          need to be changed to make the array palindromic. A palindromic array is an array that
          is read the same backwards and forwards. In one change, you can change one element to any other element.

          For example:
          smallest_change([1,2,3,5,4,7,9,6]) == 4
          smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
          smallest_change([1, 2, 3, 2, 1]) == 0
    examples: []
    tests:
      - input: '[1,2,3,5,4,7,9,6]'
        output: '4'
      - input: '[1, 2, 3, 4, 3, 2, 2]'
        output: '1'
      - input: '[1, 4, 2]'
        output: '1'
      - input: '[1, 4, 4, 2]'
        output: '1'
      - input: '[1, 2, 3, 2, 1]'
        output: '0'
      - input: '[3, 1, 1, 3]'
        output: '0'
      - input: '[1]'
        output: '0'
      - input: '[0, 1]'
        output: '1'
  - taskId: HumanEval/74
    tests:
      - input: '[], []'
        output: '[]'
      - input: '[''hi'', ''admin''], [''hi'', ''hi'']'
        output: '[''hi'', ''hi'']'
      - input: '[''hi'', ''admin''], [''hi'', ''hi'', ''admin'', ''project'']'
        output: '[''hi'', ''admin'']'
      - input: '[''4''], [''1'', ''2'', ''3'', ''4'', ''5'']'
        output: '[''4'']'
      - input: '[''hi'', ''admin''], [''hI'', ''Hi'']'
        output: '[''hI'', ''Hi'']'
      - input: '[''hi'', ''admin''], [''hI'', ''hi'', ''hi'']'
        output: '[''hI'', ''hi'', ''hi'']'
      - input: '[''hi'', ''admin''], [''hI'', ''hi'', ''hii'']'
        output: '[''hi'', ''admin'']'
      - input: '[], [''this'']'
        output: '[]'
      - input: '[''this''], []'
        output: '[]'
  - taskId: HumanEval/75
    target: >-
      Write a function that returns true if the given number is the
      multiplication of 3 prime numbers
          and false otherwise.
          Knowing that (a) is less then 100. 
          Example:
          is_multiply_prime(30) == True
          30 = 2 * 3 * 5
    examples: []
    tests:
      - input: '5'
        output: 'False'
      - input: '30'
        output: 'True'
      - input: '8'
        output: 'True'
      - input: '10'
        output: 'False'
      - input: '125'
        output: 'True'
      - input: 3 * 5 * 7
        output: 'True'
      - input: 3 * 6 * 7
        output: 'False'
      - input: 9 * 9 * 9
        output: 'False'
      - input: 11 * 9 * 9
        output: 'False'
      - input: 11 * 13 * 7
        output: 'True'
  - taskId: HumanEval/76
    target: >-
      Your task is to write a function that returns true if a number x is a
      simple
          power of n and false in other cases.
          x is a simple power of n if n**int=x
          For example:
          is_simple_power(1, 4) => true
          is_simple_power(2, 2) => true
          is_simple_power(8, 2) => true
          is_simple_power(3, 2) => false
          is_simple_power(3, 1) => false
          is_simple_power(5, 3) => false
    examples: []
    tests: []
  - taskId: HumanEval/77
    tests:
      - input: '1'
        output: 'True, "First test error: " + str(candidate(1))'
      - input: '2'
        output: 'False, "Second test error: " + str(candidate(2))'
      - input: '-1'
        output: 'True, "Third test error: " + str(candidate(-1))'
      - input: '64'
        output: 'True, "Fourth test error: " + str(candidate(64))'
      - input: '180'
        output: 'False, "Fifth test error: " + str(candidate(180))'
      - input: '1000'
        output: 'True, "Sixth test error: " + str(candidate(1000))'
      - input: '0'
        output: 'True, "1st edge test error: " + str(candidate(0))'
      - input: '1729'
        output: 'False, "2nd edge test error: " + str(candidate(1728))'
  - taskId: HumanEval/78
    target: |-
      You have been tasked to write a function that receives 
          a hexadecimal number as a string and counts the number of hexadecimal 
          digits that are primes (prime number, or a prime, is a natural number 
          greater than 1 that is not a product of two smaller natural numbers).
          Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
          Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
          So you have to determine a number of the following digits: 2, 3, 5, 7, 
          B (=decimal 11), D (=decimal 13).
          Note: you may assume the input is always correct or empty string, 
          and symbols A,B,C,D,E,F are always uppercase.
          Examples:
          For num = "AB" the output should be 1.
          For num = "1077E" the output should be 2.
          For num = "ABED1A33" the output should be 4.
          For num = "123456789ABCDEF0" the output should be 6.
          For num = "2020" the output should be 2.
    examples: []
    tests:
      - input: '"AB"'
        output: '1, "First test error: " + str(candidate("AB"))      '
      - input: '"1077E"'
        output: '2, "Second test error: " + str(candidate("1077E"))  '
      - input: '"ABED1A33"'
        output: '4, "Third test error: " + str(candidate("ABED1A33"))      '
      - input: '"2020"'
        output: '2, "Fourth test error: " + str(candidate("2020"))  '
      - input: '"123456789ABCDEF0"'
        output: '6, "Fifth test error: " + str(candidate("123456789ABCDEF0"))      '
      - input: '"112233445566778899AABBCCDDEEFF00"'
        output: >-
          12, "Sixth test error: " +
          str(candidate("112233445566778899AABBCCDDEEFF00"))  
      - input: '[]'
        output: '0'
  - taskId: HumanEval/79
    target: >-
      You will be given a number in decimal form and your task is to convert it
      to
          binary format. The function should return a string, with each character representing a binary
          number. Each character in the string will be '0' or '1'.

          There will be an extra couple of characters 'db' at the beginning and at the end of the string.
          The extra characters are there to help with the format.

          Examples:
          decimal_to_binary(15)   # returns "db1111db"
          decimal_to_binary(32)   # returns "db100000db"
    examples: []
    tests:
      - input: '0'
        output: '"db0db"'
      - input: '32'
        output: '"db100000db"'
      - input: '103'
        output: '"db1100111db"'
      - input: '15'
        output: '"db1111db", "This prints if this assert fails 1 (good for debugging!)"'
  - taskId: HumanEval/80
    target: |-
      You are given a string s.
          Your task is to check if the string is happy or not.
          A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
          For example:
          is_happy(a) => False
          is_happy(aa) => False
          is_happy(abcd) => True
          is_happy(aabb) => False
          is_happy(adb) => True
          is_happy(xyy) => False
    examples: []
    tests:
      - input: '"a"'
        output: 'False , "a"'
      - input: '"aa"'
        output: 'False , "aa"'
      - input: '"abcd"'
        output: 'True , "abcd"'
      - input: '"aabb"'
        output: 'False , "aabb"'
      - input: '"adb"'
        output: 'True , "adb"'
      - input: '"xyy"'
        output: 'False , "xyy"'
      - input: '"iopaxpoi"'
        output: 'True , "iopaxpoi"'
      - input: '"iopaxioi"'
        output: 'False , "iopaxioi"'
  - taskId: HumanEval/81
    target: |-
      It is the last week of the semester and the teacher has to give the grades
          to students. The teacher has been making her own algorithm for grading.
          The only problem is, she has lost the code she used for grading.
          She has given you a list of GPAs for some students and you have to write 
          a function that can output a list of letter grades using the following table:
                   GPA       |    Letter grade
                    4.0                A+
                  > 3.7                A 
                  > 3.3                A- 
                  > 3.0                B+
                  > 2.7                B 
                  > 2.3                B-
                  > 2.0                C+
                  > 1.7                C
                  > 1.3                C-
                  > 1.0                D+ 
                  > 0.7                D 
                  > 0.0                D-
                    0.0                E
          

          Example:
          grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    examples: []
    tests:
      - input: '[4.0, 3, 1.7, 2, 3.5]'
        output: '[''A+'', ''B'', ''C-'', ''C'', ''A-'']'
      - input: '[1.2]'
        output: '[''D+'']'
      - input: '[0.5]'
        output: '[''D-'']'
      - input: '[0.0]'
        output: '[''E'']'
      - input: '[1, 0.3, 1.5, 2.8, 3.3]'
        output: '[''D'', ''D-'', ''C-'', ''B'', ''B+'']'
      - input: '[0, 0.7]'
        output: '[''E'', ''D-'']'
  - taskId: HumanEval/82
    target: |-
      Write a function that takes a string and returns True if the string
          length is a prime number or False otherwise
          Examples
          prime_length('Hello') == True
          prime_length('abcdcba') == True
          prime_length('kittens') == True
          prime_length('orange') == False
    examples: []
    tests:
      - input: '''Hello'''
        output: 'True'
      - input: '''abcdcba'''
        output: 'True'
      - input: '''kittens'''
        output: 'True'
      - input: '''orange'''
        output: 'False'
      - input: '''wow'''
        output: 'True'
      - input: '''world'''
        output: 'True'
      - input: '''MadaM'''
        output: 'True'
      - input: '''Wow'''
        output: 'True'
      - input: ''''''
        output: 'False'
      - input: '''HI'''
        output: 'True'
      - input: '''go'''
        output: 'True'
      - input: '''gogo'''
        output: 'False'
      - input: '''aaaaaaaaaaaaaaa'''
        output: 'False'
      - input: '''Madam'''
        output: 'True'
      - input: '''M'''
        output: 'False'
      - input: '''0'''
        output: 'False'
  - taskId: HumanEval/83
    target: |-
      Given a positive integer n, return the count of the numbers of n-digit
          positive integers that start or end with 1.
    examples: []
    tests:
      - input: '1'
        output: '1'
      - input: '2'
        output: '18'
      - input: '3'
        output: '180'
      - input: '4'
        output: '1800'
      - input: '5'
        output: '18000'
  - taskId: HumanEval/84
    target: |-
      Given a positive integer N, return the total sum of its digits in binary.
          
          Example
              For N = 1000, the sum of digits will be 1 the output should be "1".
              For N = 150, the sum of digits will be 6 the output should be "110".
              For N = 147, the sum of digits will be 12 the output should be "1100".
          
          Variables:
              @N integer
                   Constraints: 0 ≤ N ≤ 10000.
          Output:
               a string of binary number
    examples: []
    tests:
      - input: '1000'
        output: '"1", "Error"'
      - input: '150'
        output: '"110", "Error"'
      - input: '147'
        output: '"1100", "Error"'
      - input: '333'
        output: '"1001", "Error"'
      - input: '963'
        output: '"10010", "Error"'
  - taskId: HumanEval/85
    target: >-
      Given a non-empty list of integers lst. add the even elements that are at
      odd indices..


          Examples:
              add([4, 2, 6, 7]) ==> 2
    examples: []
    tests:
      - input: '[4, 88]'
        output: '88'
      - input: '[4, 5, 6, 7, 2, 122]'
        output: '122'
      - input: '[4, 0, 6, 7]'
        output: '0'
      - input: '[4, 4, 6, 8]'
        output: '12'
  - taskId: HumanEval/86
    target: |-
      Write a function that takes a string and returns an ordered version of it.
          Ordered version of string, is a string where all words (separated by space)
          are replaced by a new word where all the characters arranged in
          ascending order based on ascii value.
          Note: You should keep the order of words and blank spaces in the sentence.

          For example:
          anti_shuffle('Hi') returns 'Hi'
          anti_shuffle('hello') returns 'ehllo'
          anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    examples: []
    tests:
      - input: '''Hi'''
        output: '''Hi'''
      - input: '''hello'''
        output: '''ehllo'''
      - input: '''number'''
        output: '''bemnru'''
      - input: '''abcd'''
        output: '''abcd'''
      - input: '''Hello World!!!'''
        output: '''Hello !!!Wdlor'''
      - input: ''''''
        output: ''''''
      - input: '''Hi. My name is Mister Robot. How are you?'''
        output: '''.Hi My aemn is Meirst .Rboot How aer ?ouy'''
  - taskId: HumanEval/87
    target: |-
      You are given a 2 dimensional data, as a nested lists,
          which is similar to matrix, however, unlike matrices,
          each row may contain a different number of columns.
          Given lst, and integer x, find integers x in the list,
          and return list of tuples, [(x1, y1), (x2, y2) ...] such that
          each tuple is a coordinate - (row, columns), starting with 0.
          Sort coordinates initially by rows in ascending order.
          Also, sort coordinates of the row by columns in descending order.
          
          Examples:
          get_row([
            [1,2,3,4,5,6],
            [1,2,3,4,1,6],
            [1,2,3,4,5,1]
          ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
          get_row([], 1) == []
          get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    examples: []
    tests:
      - input: '[], 1'
        output: '[]'
      - input: '[[1]], 2'
        output: '[]'
      - input: '[[], [1], [1, 2, 3]], 3'
        output: '[(2, 2)]'
  - taskId: HumanEval/88
    target: >-
      Given an array of non-negative integers, return a copy of the given array
      after sorting,
          you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
          or sort it in descending order if the sum( first index value, last index value) is even.

          Note:
          * don't change the given array.

          Examples:
          * sort_array([]) => []
          * sort_array([5]) => [5]
          * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
          * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    examples: []
    tests:
      - input: '[]'
        output: '[], "Error"'
      - input: '[5]'
        output: '[5], "Error"'
      - input: '[2, 4, 3, 0, 1, 5]'
        output: '[0, 1, 2, 3, 4, 5], "Error"'
      - input: '[2, 4, 3, 0, 1, 5, 6]'
        output: '[6, 5, 4, 3, 2, 1, 0], "Error"'
      - input: '[2, 1]'
        output: '[1, 2], "Error"'
      - input: '[15, 42, 87, 32 ,11, 0]'
        output: '[0, 11, 15, 32, 42, 87], "Error"'
      - input: '[21, 14, 23, 11]'
        output: '[23, 21, 14, 11], "Error"'
  - taskId: HumanEval/89
    target: |-
      Create a function encrypt that takes a string as an argument and
          returns a string encrypted with the alphabet being rotated. 
          The alphabet should be rotated in a manner such that the letters 
          shift down by two multiplied to two places.
          For example:
          encrypt('hi') returns 'lm'
          encrypt('asdfghjkl') returns 'ewhjklnop'
          encrypt('gf') returns 'kj'
          encrypt('et') returns 'ix'
    examples: []
    tests:
      - input: '''hi'''
        output: '''lm'', "This prints if this assert fails 1 (good for debugging!)"'
      - input: '''asdfghjkl'''
        output: >-
          'ewhjklnop', "This prints if this assert fails 1 (good for
          debugging!)"
      - input: '''gf'''
        output: '''kj'', "This prints if this assert fails 1 (good for debugging!)"'
      - input: '''et'''
        output: '''ix'', "This prints if this assert fails 1 (good for debugging!)"'
  - taskId: HumanEval/90
    target: |-
      You are given a list of integers.
          Write a function next_smallest() that returns the 2nd smallest element of the list.
          Return None if there is no such element.
          
          next_smallest([1, 2, 3, 4, 5]) == 2
          next_smallest([5, 1, 4, 3, 2]) == 2
          next_smallest([]) == None
          next_smallest([1, 1]) == None
    examples: []
    tests:
      - input: '[1, 2, 3, 4, 5]'
        output: '2'
      - input: '[5, 1, 4, 3, 2]'
        output: '2'
      - input: '[]'
        output: None
      - input: '[1, 1]'
        output: None
      - input: '[1,1,1,1,0]'
        output: '1'
      - input: '[1, 0**0]'
        output: None
      - input: '[-35, 34, 12, -45]'
        output: '-35'
  - taskId: HumanEval/91
    target: |-
      You'll be given a string of words, and your task is to count the number
          of boredoms. A boredom is a sentence that starts with the word "I".
          Sentences are delimited by '.', '?' or '!'.
         
          For example:
    examples:
      - input: is_bored("Hello world")
        output: '0'
      - input: is_bored("The sky is blue. The sun is shining. I love this weather")
        output: '1'
    tests:
      - input: '"Hello world"'
        output: '0, "Test 1"'
      - input: '"Is the sky blue?"'
        output: '0, "Test 2"'
      - input: '"I love It !"'
        output: '1, "Test 3"'
      - input: '"bIt"'
        output: '0, "Test 4"'
      - input: '"I feel good today. I will be productive. will kill It"'
        output: '2, "Test 5"'
      - input: '"You and I are going for a walk"'
        output: '0, "Test 6"'
  - taskId: HumanEval/92
    tests: []
  - taskId: HumanEval/93
    target: |-
      Write a function that takes a message, and encodes in such a 
          way that it swaps case of all letters, replaces all vowels in 
          the message with the letter that appears 2 places ahead of that 
          vowel in the english alphabet. 
          Assume only letters. 
          
          Examples:
    examples:
      - input: encode('test')
        output: '''TGST'''
      - input: encode('This is a message')
        output: '''tHKS KS C MGSSCGG'''
    tests:
      - input: '''TEST'''
        output: '''tgst'', "This prints if this assert fails 1 (good for debugging!)"'
      - input: '''Mudasir'''
        output: '''mWDCSKR'', "This prints if this assert fails 2 (good for debugging!)"'
      - input: '''YES'''
        output: '''ygs'', "This prints if this assert fails 3 (good for debugging!)"'
      - input: '''This is a message'''
        output: >-
          'tHKS KS C MGSSCGG', "This prints if this assert fails 2 (also good
          for debugging!)"
      - input: '"I DoNt KnOw WhAt tO WrItE"'
        output: >-
          'k dQnT kNqW wHcT Tq wRkTg', "This prints if this assert fails 2 (also
          good for debugging!)"
  - taskId: HumanEval/94
    target: |-
      You are given a list of integers.
          You need to find the largest prime value and return the sum of its digits.

          Examples:
          For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
          For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
          For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
          For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
          For lst = [0,81,12,3,1,21] the output should be 3
          For lst = [0,8,1,2,1,7] the output should be 7
    examples: []
    tests:
      - input: '[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]'
        output: '10, "This prints if this assert fails 1 (good for debugging!)"'
      - input: '[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]'
        output: '25, "This prints if this assert fails 2 (also good for debugging!)"'
      - input: '[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]'
        output: '13, "This prints if this assert fails 3 (also good for debugging!)"'
      - input: '[0,724,32,71,99,32,6,0,5,91,83,0,5,6]'
        output: '11, "This prints if this assert fails 4 (also good for debugging!)"'
      - input: '[0,81,12,3,1,21]'
        output: '3, "This prints if this assert fails 5 (also good for debugging!)"'
      - input: '[0,8,1,2,1,7]'
        output: '7, "This prints if this assert fails 6 (also good for debugging!)"'
      - input: '[8191]'
        output: '19, "This prints if this assert fails 7 (also good for debugging!)"'
      - input: '[8191, 123456, 127, 7]'
        output: '19, "This prints if this assert fails 8 (also good for debugging!)"'
      - input: '[127, 97, 8192]'
        output: '10, "This prints if this assert fails 9 (also good for debugging!)"'
  - taskId: HumanEval/95
    target: |-
      Given a dictionary, return True if all keys are strings in lower 
          case or all keys are strings in upper case, else return False.
          The function should return False is the given dictionary is empty.
          Examples:
          check_dict_case({"a":"apple", "b":"banana"}) should return True.
          check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
          check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
          check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
          check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    examples: []
    tests:
      - input: '{"p":"pineapple", "b":"banana"}'
        output: >-
          True, "First test error: " + str(candidate({"p":"pineapple",
          "b":"banana"}))
      - input: '{"p":"pineapple", "A":"banana", "B":"banana"}'
        output: >-
          False, "Second test error: " + str(candidate({"p":"pineapple",
          "A":"banana", "B":"banana"}))
      - input: '{"p":"pineapple", 5:"banana", "a":"apple"}'
        output: >-
          False, "Third test error: " + str(candidate({"p":"pineapple",
          5:"banana", "a":"apple"}))
      - input: '{"Name":"John", "Age":"36", "City":"Houston"}'
        output: >-
          False, "Fourth test error: " + str(candidate({"Name":"John",
          "Age":"36", "City":"Houston"}))
      - input: '{"STATE":"NC", "ZIP":"12345" }'
        output: >-
          True, "Fifth test error: " + str(candidate({"STATE":"NC",
          "ZIP":"12345" }))      
      - input: '{"fruit":"Orange", "taste":"Sweet" }'
        output: >-
          True, "Fourth test error: " + str(candidate({"fruit":"Orange",
          "taste":"Sweet" }))      
      - input: '{}'
        output: 'False, "1st edge test error: " + str(candidate({}))'
  - taskId: HumanEval/96
    target: >-
      Implement a function that takes an non-negative integer and returns an
      array of the first n
          integers that are prime numbers and less than n.
          for example:
          count_up_to(5) => [2,3]
          count_up_to(11) => [2,3,5,7]
          count_up_to(0) => []
          count_up_to(20) => [2,3,5,7,11,13,17,19]
          count_up_to(1) => []
          count_up_to(18) => [2,3,5,7,11,13,17]
    examples: []
    tests:
      - input: '5'
        output: '[2,3]'
      - input: '6'
        output: '[2,3,5]'
      - input: '7'
        output: '[2,3,5]'
      - input: '10'
        output: '[2,3,5,7]'
      - input: '0'
        output: '[]'
      - input: '22'
        output: '[2,3,5,7,11,13,17,19]'
      - input: '1'
        output: '[]'
      - input: '18'
        output: '[2,3,5,7,11,13,17]'
      - input: '47'
        output: '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]'
      - input: '101'
        output: >-
          [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,
          67, 71, 73, 79, 83, 89, 97]
  - taskId: HumanEval/97
    target: |-
      Complete the function that takes two integers and returns 
          the product of their unit digits.
          Assume the input is always valid.
          Examples:
          multiply(148, 412) should return 16.
          multiply(19, 28) should return 72.
          multiply(2020, 1851) should return 0.
          multiply(14,-15) should return 20.
    examples: []
    tests:
      - input: '148, 412'
        output: >-
          16, "First test error: " + str(candidate(148,
          412))                    
      - input: '19, 28'
        output: '72, "Second test error: " + str(candidate(19, 28))           '
      - input: '2020, 1851'
        output: '0, "Third test error: " + str(candidate(2020, 1851))'
      - input: '14,-15'
        output: '20, "Fourth test error: " + str(candidate(14,-15))      '
      - input: '76, 67'
        output: '42, "Fifth test error: " + str(candidate(76, 67))      '
      - input: '17, 27'
        output: '49, "Sixth test error: " + str(candidate(17, 27))      '
      - input: '0, 1'
        output: '0, "1st edge test error: " + str(candidate(0, 1))'
      - input: '0, 0'
        output: '0, "2nd edge test error: " + str(candidate(0, 0))'
  - taskId: HumanEval/98
    target: |-
      Given a string s, count the number of uppercase vowels in even indices.
          
          For example:
          count_upper('aBCdEf') returns 1
          count_upper('abcdefg') returns 0
          count_upper('dBBE') returns 0
    examples: []
    tests:
      - input: '''abcdefg'''
        output: '0'
      - input: '''dBBE'''
        output: '0'
      - input: ''''''
        output: '0'
      - input: '''EEEE'''
        output: '2'
  - taskId: HumanEval/99
    tests:
      - input: '"10"'
        output: '10, "Test 1"'
      - input: '"14.5"'
        output: '15, "Test 2"'
      - input: '"-15.5"'
        output: '-16, "Test 3"'
      - input: '"15.3"'
        output: '15, "Test 3"'
      - input: '"0"'
        output: '0, "Test 0"'
  - taskId: HumanEval/100
    target: |-
      Given a positive integer n, you have to make a pile of n levels of stones.
          The first level has n stones.
          The number of stones in the next level is:
              - the next odd number if n is odd.
              - the next even number if n is even.
          Return the number of stones in each level in a list, where element at index
          i represents the number of stones in the level (i+1).

          Examples:
    examples:
      - input: make_a_pile(3)
        output: '[3, 5, 7]'
    tests:
      - input: '3'
        output: '[3, 5, 7], "Test 3"'
      - input: '4'
        output: '[4,6,8,10], "Test 4"'
      - input: '5'
        output: '[5, 7, 9, 11, 13]'
      - input: '6'
        output: '[6, 8, 10, 12, 14, 16]'
      - input: '8'
        output: '[8, 10, 12, 14, 16, 18, 20, 22]'
  - taskId: HumanEval/101
    target: >-
      You will be given a string of words separated by commas or spaces. Your
      task is
          to split the string into words and return an array of the words.
          
          For example:
          words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
          words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    examples: []
    tests:
      - input: '"Hi, my name is John"'
        output: '["Hi", "my", "name", "is", "John"]'
      - input: '"One, two, three, four, five, six"'
        output: '["One", "two", "three", "four", "five", "six"]'
      - input: '"Hi, my name"'
        output: '["Hi", "my", "name"]'
      - input: '"One,, two, three, four, five, six,"'
        output: '["One", "two", "three", "four", "five", "six"]'
      - input: '""'
        output: '[]'
      - input: '"ahmed     , gamal"'
        output: '["ahmed", "gamal"]'
  - taskId: HumanEval/102
    target: |-
      This function takes two positive numbers x and y and returns the
          biggest even integer number that is in the range [x, y] inclusive. If 
          there's no such number, then the function should return -1.

          For example:
          choose_num(12, 15) = 14
          choose_num(13, 12) = -1
    examples: []
    tests:
      - input: '12, 15'
        output: '14'
      - input: '13, 12'
        output: '-1'
      - input: '33, 12354'
        output: '12354'
      - input: '5234, 5233'
        output: '-1'
      - input: '6, 29'
        output: '28'
      - input: '27, 10'
        output: '-1'
      - input: '7, 7'
        output: '-1'
      - input: '546, 546'
        output: '546'
  - taskId: HumanEval/103
    target: >-
      You are given two positive integers n and m, and your task is to compute
      the
          average of the integers from n through m (including n and m). 
          Round the answer to the nearest integer and convert that to binary.
          If n is greater than m, return -1.
          Example:
          rounded_avg(1, 5) => "0b11"
          rounded_avg(7, 5) => -1
          rounded_avg(10, 20) => "0b1111"
          rounded_avg(20, 33) => "0b11010"
    examples: []
    tests:
      - input: '1, 5'
        output: '"0b11"'
      - input: '7, 13'
        output: '"0b1010"'
      - input: '964,977'
        output: '"0b1111001010"'
      - input: '996,997'
        output: '"0b1111100100"'
      - input: '560,851'
        output: '"0b1011000010"'
      - input: '185,546'
        output: '"0b101101110"'
      - input: '362,496'
        output: '"0b110101101"'
      - input: '350,902'
        output: '"0b1001110010"'
      - input: '197,233'
        output: '"0b11010111"'
      - input: '7, 5'
        output: '-1'
      - input: '5, 1'
        output: '-1'
      - input: '5, 5'
        output: '"0b101"'
  - taskId: HumanEval/104
    target: |-
      Given a list of positive integers x. return a sorted list of all 
          elements that hasn't any even digit.

          Note: Returned list should be sorted in increasing order.
          
          For example:
    examples:
      - input: 'unique_digits([15, 33, 1422, 1])'
        output: '[1, 15, 33]'
      - input: 'unique_digits([152, 323, 1422, 10])'
        output: '[]'
    tests:
      - input: '[15, 33, 1422, 1]'
        output: '[1, 15, 33]'
      - input: '[152, 323, 1422, 10]'
        output: '[]'
      - input: '[12345, 2033, 111, 151]'
        output: '[111, 151]'
      - input: '[135, 103, 31]'
        output: '[31, 135]'
  - taskId: HumanEval/105
    target: >-
      Given an array of integers, sort the integers that are between 1 and 9
      inclusive,
          reverse the resulting array, and then replace each digit by its corresponding name from
          "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

          For example:
            arr = [2, 1, 1, 4, 5, 8, 2, 3]   
                  -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
                  -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
            return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
          
            If the array is empty, return an empty array:
            arr = []
            return []
          
            If the array has any strange number ignore it:
            arr = [1, -1 , 55] 
                  -> sort arr -> [-1, 1, 55]
                  -> reverse arr -> [55, 1, -1]
            return = ['One']
    examples: []
    tests:
      - input: '[2, 1, 1, 4, 5, 8, 2, 3]'
        output: >-
          ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"],
          "Error"
      - input: '[]'
        output: '[], "Error"'
      - input: '[1, -1 , 55]'
        output: '[''One''], "Error"'
      - input: '[1, -1, 3, 2]'
        output: '["Three", "Two", "One"]'
      - input: '[9, 4, 8]'
        output: '["Nine", "Eight", "Four"]'
  - taskId: HumanEval/106
    target: |-
      Implement the function f that takes n as a parameter,
          and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
          or the sum of numbers from 1 to i otherwise.
          i starts from 1.
          the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
          Example:
          f(5) == [1, 2, 6, 24, 15]
    examples: []
    tests:
      - input: '5'
        output: '[1, 2, 6, 24, 15]'
      - input: '7'
        output: '[1, 2, 6, 24, 15, 720, 28]'
      - input: '1'
        output: '[1]'
      - input: '3'
        output: '[1, 2, 6]'
  - taskId: HumanEval/107
    target: >-
      Given a positive integer n, return a tuple that has the number of even and
      odd
          integer palindromes that fall within the range(1, n), inclusive.

          Example 1:

              Input: 3
              Output: (1, 2)
              Explanation:
              Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

          Example 2:

              Input: 12
              Output: (4, 6)
              Explanation:
              Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

          Note:
              1. 1 <= n <= 10^3
              2. returned tuple has the number of even and odd integer palindromes respectively.
    examples: []
    tests:
      - input: '123'
        output: '(8, 13)'
      - input: '12'
        output: '(4, 6)'
      - input: '3'
        output: '(1, 2)'
      - input: '63'
        output: '(6, 8)'
      - input: '25'
        output: '(5, 6)'
      - input: '19'
        output: '(4, 6)'
      - input: '9'
        output: '(4, 5), "This prints if this assert fails 1 (good for debugging!)"'
      - input: '1'
        output: >-
          (0, 1), "This prints if this assert fails 2 (also good for
          debugging!)"
  - taskId: HumanEval/108
    target: |-
      Write a function count_nums which takes an array of integers and returns
          the number of elements which has a sum of digits > 0.
          If a number is negative, then its first signed digit will be negative:
          e.g. -123 has signed digits -1, 2, and 3.
    examples:
      - input: 'count_nums([]) == 0'
        output: ''
      - input: 'count_nums([-1, 11, -11]) == 1'
        output: ''
      - input: 'count_nums([1, 1, 2])'
        output: '3'
    tests:
      - input: '[]'
        output: '0'
      - input: '[-1, -2, 0]'
        output: '0'
      - input: '[1, 1, 2, -2, 3, 4, 5]'
        output: '6'
      - input: '[1, 6, 9, -6, 0, 1, 5]'
        output: '5'
      - input: '[1, 100, 98, -7, 1, -1]'
        output: '4'
      - input: '[12, 23, 34, -45, -56, 0]'
        output: '5'
      - input: '[-0, 1**0]'
        output: '1'
      - input: '[1]'
        output: '1'
  - taskId: HumanEval/109
    target: |-
      We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
          numbers in the array will be randomly ordered. Your task is to determine if
          it is possible to get an array sorted in non-decreasing order by performing 
          the following operation on the given array:
              You are allowed to perform right shift operation any number of times.
          
          One right shift operation means shifting all elements of the array by one
          position in the right direction. The last element of the array will be moved to
          the starting position in the array i.e. 0th index. 

          If it is possible to obtain the sorted array by performing the above operation
          then return True else return False.
          If the given array is empty then return True.

          Note: The given list is guaranteed to have unique elements.

          For Example:
          
          move_one_ball([3, 4, 5, 1, 2])==>True
          Explanation: By performin 2 right shift operations, non-decreasing order can
                       be achieved for the given array.
          move_one_ball([3, 5, 4, 1, 2])==>False
          Explanation:It is not possible to get non-decreasing order for the given
                      array by performing any number of right shift operations.
    examples: []
    tests: []
  - taskId: HumanEval/110
    target: >-
      In this problem, you will implement a function that takes two lists of
      numbers,
          and determines whether it is possible to perform an exchange of elements
          between them to make lst1 a list of only even numbers.
          There is no limit on the number of exchanged elements between lst1 and lst2.
          If it is possible to exchange elements between the lst1 and lst2 to make
          all the elements of lst1 to be even, return "YES".
          Otherwise, return "NO".
          For example:
          exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
          exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
          It is assumed that the input lists will be non-empty.
    examples: []
    tests:
      - input: '[1, 2, 3, 4], [1, 2, 3, 4]'
        output: '"YES"'
      - input: '[1, 2, 3, 4], [1, 5, 3, 4]'
        output: '"NO"'
      - input: '[1, 2, 3, 4], [2, 1, 4, 3]'
        output: '"YES" '
      - input: '[5, 7, 3], [2, 6, 4]'
        output: '"YES"'
      - input: '[5, 7, 3], [2, 6, 3]'
        output: '"NO" '
      - input: '[3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]'
        output: '"NO"'
      - input: '[100, 200], [200, 200]'
        output: '"YES"'
  - taskId: HumanEval/111
    target: >-
      Given a string representing a space separated lowercase letters, return a
      dictionary
          of the letter with the most repetition and containing the corresponding count.
          If several letters have the same occurrence, return all of them.
          
          Example:
          histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
          histogram('a b b a') == {'a': 2, 'b': 2}
          histogram('a b c a b') == {'a': 2, 'b': 2}
          histogram('b b b b a') == {'b': 4}
          histogram('') == {}
    examples: []
    tests:
      - input: '''a b b a'''
        output: >-
          {'a':2,'b': 2}, "This prints if this assert fails 1 (good for
          debugging!)"
      - input: '''a b c a b'''
        output: >-
          {'a': 2, 'b': 2}, "This prints if this assert fails 2 (good for
          debugging!)"
      - input: '''a b c d g'''
        output: >-
          {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, "This prints if this assert
          fails 3 (good for debugging!)"
      - input: '''r t g'''
        output: >-
          {'r': 1,'t': 1,'g': 1}, "This prints if this assert fails 4 (good for
          debugging!)"
      - input: '''b b b b a'''
        output: '{''b'': 4}, "This prints if this assert fails 5 (good for debugging!)"'
      - input: '''r t g'''
        output: >-
          {'r': 1,'t': 1,'g': 1}, "This prints if this assert fails 6 (good for
          debugging!)"
      - input: ''''''
        output: '{}, "This prints if this assert fails 7 (also good for debugging!)"'
      - input: '''a'''
        output: >-
          {'a': 1}, "This prints if this assert fails 8 (also good for
          debugging!)"
  - taskId: HumanEval/112
    target: |-
      Task
          We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
          then check if the result string is palindrome.
          A string is called palindrome if it reads the same backward as forward.
          You should return a tuple containing the result string and True/False for the check.
          Example
          For s = "abcde", c = "ae", the result should be ('bcd',False)
          For s = "abcdef", c = "b"  the result should be ('acdef',False)
          For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    examples: []
    tests:
      - input: '"abcde","ae"'
        output: '(''bcd'',False)'
      - input: '"abcdef", "b"'
        output: '(''acdef'',False)'
      - input: '"abcdedcba","ab"'
        output: '(''cdedc'',True)'
      - input: '"dwik","w"'
        output: '(''dik'',False)'
      - input: '"a","a"'
        output: '('''',True)'
      - input: '"abcdedcba",""'
        output: '(''abcdedcba'',True)'
      - input: '"abcdedcba","v"'
        output: '(''abcdedcba'',True)'
      - input: '"vabba","v"'
        output: '(''abba'',True)'
      - input: '"mamma", "mia"'
        output: '("", True)'
  - taskId: HumanEval/113
    target: >-
      Given a list of strings, where each string consists of only digits, return
      a list.
          Each element i of the output should be "the number of odd elements in the
          string i of the input." where all the i's should be replaced by the number
          of odd digits in the i'th string of the input.
    examples:
      - input: 'odd_count([''1234567''])'
        output: '["the number of odd elements 4n the str4ng 4 of the 4nput."]'
      - input: 'odd_count([''3'',"11111111"])'
        output: '["the number of odd elements 1n the str1ng 1 of the 1nput.",'
    tests:
      - input: '[''1234567'']'
        output: '["the number of odd elements 4n the str4ng 4 of the 4nput."], "Test 1"'
      - input: '[''3'',"11111111"]'
        output: >-
          ["the number of odd elements 1n the str1ng 1 of the 1nput.", "the
          number of odd elements 8n the str8ng 8 of the 8nput."], "Test 2"
      - input: '[''271'', ''137'', ''314'']'
        output: '['
  - taskId: HumanEval/114
    target: >-
      Given an array of integers nums, find the minimum sum of any non-empty
      sub-array
          of nums.
          Example
          minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
          minSubArraySum([-1, -2, -3]) == -6
    examples: []
    tests:
      - input: '[2, 3, 4, 1, 2, 4]'
        output: '1, "This prints if this assert fails 1 (good for debugging!)"'
      - input: '[-1, -2, -3]'
        output: '-6'
      - input: '[-1, -2, -3, 2, -10]'
        output: '-14'
      - input: '[-9999999999999999]'
        output: '-9999999999999999'
      - input: '[0, 10, 20, 1000000]'
        output: '0'
      - input: '[-1, -2, -3, 10, -5]'
        output: '-6'
      - input: '[100, -1, -2, -3, 10, -5]'
        output: '-6'
      - input: '[10, 11, 13, 8, 3, 4]'
        output: '3'
      - input: '[100, -33, 32, -1, 0, -2]'
        output: '-33'
      - input: '[-10]'
        output: '-10, "This prints if this assert fails 2 (also good for debugging!)"'
      - input: '[7]'
        output: '7'
      - input: '[1, -1]'
        output: '-1'
  - taskId: HumanEval/115
    target: >-
      You are given a rectangular grid of wells. Each row represents a single
      well,
          and each 1 in a row represents a single unit of water.
          Each well has a corresponding bucket that can be used to extract water from it, 
          and all buckets have the same capacity.
          Your task is to use the buckets to empty the wells.
          Output the number of times you need to lower the buckets.

          Example 1:
              Input: 
                  grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
                  bucket_capacity : 1
              Output: 6

          Example 2:
              Input: 
                  grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
                  bucket_capacity : 2
              Output: 5
          
          Example 3:
              Input: 
                  grid : [[0,0,0], [0,0,0]]
                  bucket_capacity : 5
              Output: 0

          Constraints:
              * all wells have the same length
              * 1 <= grid.length <= 10^2
              * 1 <= grid[:,1].length <= 10^2
              * grid[i][j] -> 0 | 1
              * 1 <= capacity <= 10
    examples: []
    tests:
      - input: '[[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1'
        output: '6, "Error"'
      - input: '[[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2'
        output: '5, "Error"'
      - input: '[[0,0,0], [0,0,0]], 5'
        output: '0, "Error"'
      - input: '[[1,1,1,1], [1,1,1,1]], 2'
        output: '4, "Error"'
      - input: '[[1,1,1,1], [1,1,1,1]], 9'
        output: '2, "Error"'
  - taskId: HumanEval/116
    target: >-
      In this Kata, you have to sort an array of non-negative integers according
      to
          number of ones in their binary representation in ascending order.
          For similar number of ones, sort based on decimal value.

          It must be implemented like this:
    examples:
      - input: 'sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]'
        output: ''
      - input: 'sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]'
        output: ''
      - input: 'sort_array([1, 0, 2, 3, 4])'
        output: '[0, 1, 2, 3, 4]'
    tests:
      - input: '[1,5,2,3,4]'
        output: '[1, 2, 4, 3, 5]'
      - input: '[-2,-3,-4,-5,-6]'
        output: '[-4, -2, -6, -5, -3]'
      - input: '[1,0,2,3,4]'
        output: '[0, 1, 2, 4, 3]'
      - input: '[]'
        output: '[]'
      - input: '[2,5,77,4,5,3,5,7,2,3,4]'
        output: '[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]'
      - input: '[3,6,44,12,32,5]'
        output: '[32, 3, 5, 6, 12, 44]'
      - input: '[2,4,8,16,32]'
        output: '[2, 4, 8, 16, 32]'
      - input: '[2,4,8,16,32]'
        output: '[2, 4, 8, 16, 32]'
  - taskId: HumanEval/117
    target: >-
      Given a string s and a natural number n, you have been tasked to
      implement 
          a function that returns a list of all words from string s that contain exactly 
          n consonants, in order these words appear in the string s.
          If the string s is empty then the function should return an empty list.
          Note: you may assume the input string contains only letters and spaces.
          Examples:
          select_words("Mary had a little lamb", 4) ==> ["little"]
          select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
          select_words("simple white space", 2) ==> []
          select_words("Hello world", 4) ==> ["world"]
          select_words("Uncle sam", 3) ==> ["Uncle"]
    examples: []
    tests:
      - input: '"Mary had a little lamb", 4'
        output: >-
          ["little"], "First test error: " + str(candidate("Mary had a little
          lamb", 4))      
      - input: '"Mary had a little lamb", 3'
        output: >-
          ["Mary", "lamb"], "Second test error: " + str(candidate("Mary had a
          little lamb", 3))  
      - input: '"simple white space", 2'
        output: >-
          [], "Third test error: " + str(candidate("simple white space",
          2))      
      - input: '"Hello world", 4'
        output: '["world"], "Fourth test error: " + str(candidate("Hello world", 4))  '
      - input: '"Uncle sam", 3'
        output: '["Uncle"], "Fifth test error: " + str(candidate("Uncle sam", 3))'
      - input: '"", 4'
        output: '[], "1st edge test error: " + str(candidate("", 4))'
      - input: '"a b c d e f", 1'
        output: >-
          ["b", "c", "d", "f"], "2nd edge test error: " + str(candidate("a b c d
          e f", 1))
  - taskId: HumanEval/118
    target: >-
      You are given a word. Your task is to find the closest vowel that stands
      between 
          two consonants from the right side of the word (case sensitive).
          
          Vowels in the beginning and ending doesn't count. Return empty string if you didn't
          find any vowel met the above condition. 

          You may assume that the given string contains English letter only.

          Example:
          get_closest_vowel("yogurt") ==> "u"
          get_closest_vowel("FULL") ==> "U"
          get_closest_vowel("quick") ==> ""
          get_closest_vowel("ab") ==> ""
    examples: []
    tests:
      - input: '"yogurt"'
        output: '"u"'
      - input: '"full"'
        output: '"u"'
      - input: '"easy"'
        output: '""'
      - input: '"eAsy"'
        output: '""'
      - input: '"ali"'
        output: '""'
      - input: '"bad"'
        output: '"a"'
      - input: '"most"'
        output: '"o"'
      - input: '"ab"'
        output: '""'
      - input: '"ba"'
        output: '""'
      - input: '"quick"'
        output: '""'
      - input: '"anime"'
        output: '"i"'
      - input: '"Asia"'
        output: '""'
      - input: '"Above"'
        output: '"o"'
  - taskId: HumanEval/119
    tests:
      - input: '[''()('', '')'']'
        output: '''Yes'''
      - input: '['')'', '')'']'
        output: '''No'''
      - input: '[''(()(())'', ''())())'']'
        output: '''No'''
      - input: '['')())'', ''(()()('']'
        output: '''Yes'''
      - input: '[''(())))'', ''(()())(('']'
        output: '''Yes'''
      - input: '[''()'', ''())'']'
        output: '''No'''
      - input: '[''(()('', ''()))()'']'
        output: '''Yes'''
      - input: '[''(((('', ''((())'']'
        output: '''No'''
      - input: '['')(()'', ''(()('']'
        output: '''No'''
      - input: '['')('', '')('']'
        output: '''No'''
      - input: '[''('', '')'']'
        output: '''Yes'''
      - input: '['')'', ''('']'
        output: '''Yes'' '
  - taskId: HumanEval/120
    target: >-
      Given an array arr of integers and a positive integer k, return a sorted
      list 
          of length k with the maximum k numbers in arr.

          Example 1:

              Input: arr = [-3, -4, 5], k = 3
              Output: [-4, -3, 5]

          Example 2:

              Input: arr = [4, -4, 4], k = 2
              Output: [4, 4]

          Example 3:

              Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
              Output: [2]

          Note:
              1. The length of the array will be in the range of [1, 1000].
              2. The elements in the array will be in the range of [-1000, 1000].
              3. 0 <= k <= len(arr)
    examples: []
    tests:
      - input: '[-3, -4, 5], 3'
        output: '[-4, -3, 5]'
      - input: '[4, -4, 4], 2'
        output: '[4, 4]'
      - input: '[-3, 2, 1, 2, -1, -2, 1], 1'
        output: '[2]'
      - input: '[123, -123, 20, 0 , 1, 2, -3], 3'
        output: '[2, 20, 123]'
      - input: '[-123, 20, 0 , 1, 2, -3], 4'
        output: '[0, 1, 2, 20]'
      - input: '[5, 15, 0, 3, -13, -8, 0], 7'
        output: '[-13, -8, 0, 0, 3, 5, 15]'
      - input: '[-1, 0, 2, 5, 3, -10], 2'
        output: '[3, 5]'
      - input: '[1, 0, 5, -7], 1'
        output: '[5]'
      - input: '[4, -4], 2'
        output: '[-4, 4]'
      - input: '[-10, 10], 2'
        output: '[-10, 10]'
      - input: '[1, 2, 3, -23, 243, -400, 0], 0'
        output: '[]'
  - taskId: HumanEval/121
    target: >-
      Given a non-empty list of integers, return the sum of all of the odd
      elements that are in even positions.
          

          Examples
          solution([5, 8, 7, 1]) ==> 12
          solution([3, 3, 3, 3, 3]) ==> 9
          solution([30, 13, 24, 321]) ==>0
    examples: []
    tests:
      - input: '[3, 3, 3, 3, 3]'
        output: '9'
      - input: '[30, 13, 24, 321]'
        output: '0'
      - input: '[5, 9]'
        output: '5'
      - input: '[2, 4, 8]'
        output: '0'
      - input: '[30, 13, 23, 32]'
        output: '23'
      - input: '[3, 13, 2, 9]'
        output: '3'
  - taskId: HumanEval/122
    target: |-
      Given a non-empty array of integers arr and an integer k, return
          the sum of the elements with at most two digits from the first k elements of arr.

          Example:

              Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
              Output: 24 # sum of 21 + 3

          Constraints:
              1. 1 <= len(arr) <= 100
              2. 1 <= k <= len(arr)
    examples: []
    tests:
      - input: '[1,-2,-3,41,57,76,87,88,99], 3'
        output: '-4'
      - input: '[111,121,3,4000,5,6], 2'
        output: '0'
      - input: '[11,21,3,90,5,6,7,8,9], 4'
        output: '125'
      - input: '[111,21,3,4000,5,6,7,8,9], 4'
        output: '24, "This prints if this assert fails 1 (good for debugging!)"'
      - input: '[1], 1'
        output: '1, "This prints if this assert fails 2 (also good for debugging!)"'
  - taskId: HumanEval/123
    target: >-
      Given a positive integer n, return a sorted list that has the odd numbers
      in collatz sequence.

          The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
          as follows: start with any positive integer n. Then each term is obtained from the 
          previous term as follows: if the previous term is even, the next term is one half of 
          the previous term. If the previous term is odd, the next term is 3 times the previous
          term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

          Note: 
              1. Collatz(1) is [1].
              2. returned list sorted in increasing order.

          For example:
          get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    examples: []
    tests:
      - input: '14'
        output: '[1, 5, 7, 11, 13, 17]'
      - input: '5'
        output: '[1, 5]'
      - input: '12'
        output: '[1, 3, 5], "This prints if this assert fails 1 (good for debugging!)"'
      - input: '1'
        output: '[1], "This prints if this assert fails 2 (also good for debugging!)"'
  - taskId: HumanEval/124
    target: |-
      You have to write a function which validates a given date string and
          returns True if the date is valid otherwise False.
          The date is valid if all of the following rules are satisfied:
          1. The date string is not empty.
          2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
          3. The months should not be less than 1 or higher than 12.
          4. The date should be in the format: mm-dd-yyyy

          for example: 
          valid_date('03-11-2000') => True

          valid_date('15-01-2012') => False

          valid_date('04-0-2040') => False

          valid_date('06-04-2020') => True

          valid_date('06/04/2020') => False
    examples: []
    tests:
      - input: '''03-11-2000'''
        output: 'True'
      - input: '''15-01-2012'''
        output: 'False'
      - input: '''04-0-2040'''
        output: 'False'
      - input: '''06-04-2020'''
        output: 'True'
      - input: '''01-01-2007'''
        output: 'True'
      - input: '''03-32-2011'''
        output: 'False'
      - input: ''''''
        output: 'False'
      - input: '''04-31-3000'''
        output: 'False'
      - input: '''06-06-2005'''
        output: 'True'
      - input: '''21-31-2000'''
        output: 'False'
      - input: '''04-12-2003'''
        output: 'True'
      - input: '''04122003'''
        output: 'False'
      - input: '''20030412'''
        output: 'False'
      - input: '''2003-04'''
        output: 'False'
      - input: '''2003-04-12'''
        output: 'False'
      - input: '''04-2003'''
        output: 'False'
  - taskId: HumanEval/125
    tests:
      - input: '"Hello world!"'
        output: '["Hello","world!"]'
      - input: '"Hello,world!"'
        output: '["Hello","world!"]'
      - input: '"Hello world,!"'
        output: '["Hello","world,!"]'
      - input: '"Hello,Hello,world !"'
        output: '["Hello,Hello,world","!"]'
      - input: '"abcdef"'
        output: '3'
      - input: '"aaabb"'
        output: '2'
      - input: '"aaaBb"'
        output: '1'
      - input: '""'
        output: '0'
  - taskId: HumanEval/126
    tests:
      - input: '[5]'
        output: 'True'
      - input: '[1, 2, 3, 4, 5]'
        output: 'True'
      - input: '[1, 3, 2, 4, 5]'
        output: 'False'
      - input: '[1, 2, 3, 4, 5, 6]'
        output: 'True'
      - input: '[1, 2, 3, 4, 5, 6, 7]'
        output: 'True'
      - input: '[1, 3, 2, 4, 5, 6, 7]'
        output: 'False, "This prints if this assert fails 1 (good for debugging!)"'
      - input: '[]'
        output: 'True, "This prints if this assert fails 2 (good for debugging!)"'
      - input: '[1]'
        output: 'True, "This prints if this assert fails 3 (good for debugging!)"'
      - input: '[3, 2, 1]'
        output: 'False, "This prints if this assert fails 4 (good for debugging!)"'
      - input: '[1, 2, 2, 2, 3, 4]'
        output: 'False, "This prints if this assert fails 5 (good for debugging!)"'
      - input: '[1, 2, 3, 3, 3, 4]'
        output: 'False, "This prints if this assert fails 6 (good for debugging!)"'
      - input: '[1, 2, 2, 3, 3, 4]'
        output: 'True, "This prints if this assert fails 7 (good for debugging!)"'
      - input: '[1, 2, 3, 4]'
        output: 'True, "This prints if this assert fails 8 (good for debugging!)"'
  - taskId: HumanEval/127
    target: |-
      You are given two intervals,
          where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
          The given intervals are closed which means that the interval (start, end)
          includes both start and end.
          For each given interval, it is assumed that its start is less or equal its end.
          Your task is to determine whether the length of intersection of these two 
          intervals is a prime number.
          Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
          which its length is 1, which not a prime number.
          If the length of the intersection is a prime number, return "YES",
          otherwise, return "NO".
          If the two intervals don't intersect, return "NO".


          [input/output] samples:
          intersection((1, 2), (2, 3)) ==> "NO"
          intersection((-1, 1), (0, 4)) ==> "NO"
          intersection((-3, -1), (-5, 5)) ==> "YES"
    examples: []
    tests:
      - input: '(1, 2), (2, 3)'
        output: '"NO"'
      - input: '(-1, 1), (0, 4)'
        output: '"NO"'
      - input: '(-3, -1), (-5, 5)'
        output: '"YES"'
      - input: '(-2, 2), (-4, 0)'
        output: '"YES"'
      - input: '(-11, 2), (-1, -1)'
        output: '"NO"'
      - input: '(1, 2), (3, 5)'
        output: '"NO"'
      - input: '(1, 2), (1, 2)'
        output: '"NO"'
      - input: '(-2, -2), (-3, -2)'
        output: '"NO"'
  - taskId: HumanEval/128
    target: |-
      You are given an array arr of integers and you need to return
          sum of magnitudes of integers multiplied by product of all signs
          of each number in the array, represented by 1, -1 or 0.
          Note: return None for empty arr.

          Example:
    examples:
      - input: 'prod_signs([1, 2, 2, -4]) == -9'
        output: ''
      - input: 'prod_signs([0, 1]) == 0'
        output: ''
      - input: 'prod_signs([])'
        output: None
    tests:
      - input: '[1, 2, 2, -4]'
        output: '-9'
      - input: '[0, 1]'
        output: '0'
      - input: '[1, 1, 1, 2, 3, -1, 1]'
        output: '-10'
      - input: '[]'
        output: None
      - input: '[2, 4,1, 2, -1, -1, 9]'
        output: '20'
      - input: '[-1, 1, -1, 1]'
        output: '4'
      - input: '[-1, 1, 1, 1]'
        output: '-4'
      - input: '[-1, 1, 1, 0]'
        output: '0'
  - taskId: HumanEval/129
    target: |-
      Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
          each cell of the grid contains a value. Every integer in the range [1, N * N]
          inclusive appears exactly once on the cells of the grid.

          You have to find the minimum path of length k in the grid. You can start
          from any cell, and in each step you can move to any of the neighbor cells,
          in other words, you can go to cells which share an edge with you current
          cell.
          Please note that a path of length k means visiting exactly k cells (not
          necessarily distinct).
          You CANNOT go off the grid.
          A path A (of length k) is considered less than a path B (of length k) if
          after making the ordered lists of the values on the cells that A and B go
          through (let's call them lst_A and lst_B), lst_A is lexicographically less
          than lst_B, in other words, there exist an integer index i (1 <= i <= k)
          such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
          lst_A[j] = lst_B[j].
          It is guaranteed that the answer is unique.
          Return an ordered list of the values on the cells that the minimum path go through.

          Examples:

              Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
              Output: [1, 2, 1]

              Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
              Output: [1]
    examples: []
    tests:
      - input: '[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3'
        output: '[1, 2, 1]'
      - input: '[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1'
        output: '[1]'
      - input: '[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4'
        output: '[1, 2, 1, 2]'
      - input: '[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7'
        output: '[1, 10, 1, 10, 1, 10, 1]'
      - input: '[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5'
        output: '[1, 7, 1, 7, 1]'
      - input: '[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9'
        output: '[1, 6, 1, 6, 1, 6, 1, 6, 1]'
      - input: '[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12'
        output: '[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]'
      - input: '[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8'
        output: '[1, 3, 1, 3, 1, 3, 1, 3]'
      - input: '[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8'
        output: '[1, 5, 1, 5, 1, 5, 1, 5]'
      - input: '[[1, 2], [3, 4]], 10'
        output: '[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]'
      - input: '[[1, 3], [3, 2]], 10'
        output: '[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]'
  - taskId: HumanEval/130
    target: >-
      Everyone knows Fibonacci sequence, it was studied deeply by mathematicians
      in 
          the last couple centuries. However, what people don't know is Tribonacci sequence.
          Tribonacci sequence is defined by the recurrence:
          tri(1) = 3
          tri(n) = 1 + n / 2, if n is even.
          tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
          For example:
          tri(2) = 1 + (2 / 2) = 2
          tri(4) = 3
          tri(3) = tri(2) + tri(1) + tri(4)
                 = 2 + 3 + 3 = 8 
          You are given a non-negative integer number n, you have to a return a list of the 
          first n + 1 numbers of the Tribonacci sequence.
          Examples:
          tri(3) = [1, 3, 2, 8]
    examples: []
    tests:
      - input: '3'
        output: '[1, 3, 2.0, 8.0]'
      - input: '4'
        output: '[1, 3, 2.0, 8.0, 3.0]'
      - input: '5'
        output: '[1, 3, 2.0, 8.0, 3.0, 15.0]'
      - input: '6'
        output: '[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]'
      - input: '7'
        output: '[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]'
      - input: '8'
        output: '[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]'
      - input: '9'
        output: '[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]'
      - input: '20'
        output: >-
          [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0,
          63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]
      - input: '0'
        output: '[1]'
      - input: '1'
        output: '[1, 3]'
  - taskId: HumanEval/131
    target: |-
      Given a positive integer n, return the product of the odd digits.
          Return 0 if all digits are even.
          For example:
          digits(1)  == 1
          digits(4)  == 0
          digits(235) == 15
    examples: []
    tests:
      - input: '5'
        output: '5'
      - input: '54'
        output: '5'
      - input: '5014'
        output: '5'
      - input: '98765'
        output: '315'
      - input: '5576543'
        output: '2625'
      - input: '2468'
        output: '0'
  - taskId: HumanEval/132
    tests:
      - input: '''[[]]'''
        output: 'True, "This prints if this assert fails 1 (good for debugging!)"'
      - input: '''[]]]]]]][[[[[]'''
        output: 'False'
      - input: '''[][]'''
        output: 'False'
      - input: '(''[]'')'
        output: 'False'
      - input: '''[[[[]]]]'''
        output: 'True'
      - input: '''[]]]]]]]]]]'''
        output: 'False'
      - input: '''[][][[]]'''
        output: 'True'
      - input: '''[[]'''
        output: 'False'
      - input: '''[]]'''
        output: 'False'
      - input: '''[[]][['''
        output: 'True'
      - input: '''[[][]]'''
        output: 'True'
      - input: ''''''
        output: 'False, "This prints if this assert fails 2 (also good for debugging!)"'
      - input: '''[[[[[[[['''
        output: 'False'
      - input: ''']]]]]]]]'''
        output: 'False'
  - taskId: HumanEval/133
    target: |-
      You are given a list of numbers.
          You need to return the sum of squared numbers in the given list,
          round each element in the list to the upper int(Ceiling) first.
          Examples:
          For lst = [1,2,3] the output should be 14
          For lst = [1,4,9] the output should be 98
          For lst = [1,3,5,7] the output should be 84
          For lst = [1.4,4.2,0] the output should be 29
          For lst = [-2.4,1,1] the output should be 6
    examples: []
    tests: []
  - taskId: HumanEval/134
    tests:
      - input: '"apple"'
        output: 'False'
      - input: '"apple pi e"'
        output: 'True'
      - input: '"eeeee"'
        output: 'False'
      - input: '"A"'
        output: 'True'
      - input: '"Pumpkin pie "'
        output: 'False'
      - input: '"Pumpkin pie 1"'
        output: 'False'
      - input: '""'
        output: 'False'
      - input: '"eeeee e "'
        output: 'False'
      - input: '"apple pie"'
        output: 'False'
      - input: '"apple pi e "'
        output: 'False'
  - taskId: HumanEval/135
    target: |-
      Create a function which returns the largest index of an element which
          is not greater than or equal to the element immediately preceding it. If
          no such element exists then return -1. The given array will not contain
          duplicate values.

          Examples:
          can_arrange([1,2,4,3,5]) = 3
          can_arrange([1,2,3]) = -1
    examples: []
    tests: []
  - taskId: HumanEval/136
    tests:
      - input: '[2, 4, 1, 3, 5, 7]'
        output: '(None, 1)'
      - input: '[2, 4, 1, 3, 5, 7, 0]'
        output: '(None, 1)'
      - input: '[1, 3, 2, 4, 5, 6, -2]'
        output: '(-2, 1)'
      - input: '[4, 5, 3, 6, 2, 7, -7]'
        output: '(-7, 2)'
      - input: '[7, 3, 8, 4, 9, 2, 5, -9]'
        output: '(-9, 2)'
      - input: '[]'
        output: '(None, None)'
      - input: '[0]'
        output: '(None, None)'
      - input: '[-1, -3, -5, -6]'
        output: '(-1, None)'
      - input: '[-1, -3, -5, -6, 0]'
        output: '(-1, None)'
      - input: '[-6, -4, -4, -3, 1]'
        output: '(-3, 1)'
      - input: '[-6, -4, -4, -3, -100, 1]'
        output: '(-3, 1)'
  - taskId: HumanEval/137
    target: |-
      Create a function that takes integers, floats, or strings representing
          real numbers, and returns the larger variable in its given variable type.
          Return None if the values are equal.
          Note: If a real number is represented as a string, the floating point might be . or ,

          compare_one(1, 2.5) ➞ 2.5
          compare_one(1, "2,3") ➞ "2,3"
          compare_one("5,1", "6") ➞ "6"
          compare_one("1", 1) ➞ None
    examples: []
    tests:
      - input: '1, 2'
        output: '2'
      - input: '1, 2.5'
        output: '2.5'
      - input: '2, 3'
        output: '3'
      - input: '5, 6'
        output: '6'
      - input: '1, "2,3"'
        output: '"2,3"'
      - input: '"5,1", "6"'
        output: '"6"'
      - input: '"1", "2"'
        output: '"2"'
      - input: '"1", 1'
        output: None
  - taskId: HumanEval/138
    target: >-
      Evaluate whether the given number n can be written as the sum of exactly 4
      positive even numbers
          Example
          is_equal_to_sum_even(4) == False
          is_equal_to_sum_even(6) == False
          is_equal_to_sum_even(8) == True
    examples: []
    tests:
      - input: '4'
        output: 'False'
      - input: '6'
        output: 'False'
      - input: '8'
        output: 'True'
      - input: '10'
        output: 'True'
      - input: '11'
        output: 'False'
      - input: '12'
        output: 'True'
      - input: '13'
        output: 'False'
      - input: '16'
        output: 'True'
  - taskId: HumanEval/139
    target: |-
      The Brazilian factorial is defined as:
          brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
          where n > 0

          For example:
    examples:
      - input: special_factorial(4)
        output: '288'
    tests:
      - input: '4'
        output: '288, "Test 4"'
      - input: '5'
        output: '34560, "Test 5"'
      - input: '7'
        output: '125411328000, "Test 7"'
      - input: '1'
        output: '1, "Test 1"'
  - taskId: HumanEval/140
    target: |-
      Given a string text, replace all spaces in it with underscores, 
          and if a string has more than 2 consecutive spaces, 
          then replace all consecutive spaces with - 
          
          fix_spaces("Example") == "Example"
          fix_spaces("Example 1") == "Example_1"
          fix_spaces(" Example 2") == "_Example_2"
          fix_spaces(" Example   3") == "_Example-3"
    examples: []
    tests:
      - input: '"Example"'
        output: '"Example", "This prints if this assert fails 1 (good for debugging!)"'
      - input: '"Mudasir Hanif "'
        output: >-
          "Mudasir_Hanif_", "This prints if this assert fails 2 (good for
          debugging!)"
      - input: '"Yellow Yellow  Dirty  Fellow"'
        output: >-
          "Yellow_Yellow__Dirty__Fellow", "This prints if this assert fails 3
          (good for debugging!)"
      - input: '"Exa   mple"'
        output: '"Exa-mple", "This prints if this assert fails 4 (good for debugging!)"'
      - input: '"   Exa 1 2 2 mple"'
        output: >-
          "-Exa_1_2_2_mple", "This prints if this assert fails 4 (good for
          debugging!)"
  - taskId: HumanEval/141
    target: >-
      Create a function which takes a string representing a file's name, and
      returns
          'Yes' if the the file's name is valid, and returns 'No' otherwise.
          A file's name is considered to be valid if and only if all the following conditions 
          are met:
          - There should not be more than three digits ('0'-'9') in the file's name.
          - The file's name contains exactly one dot '.'
          - The substring before the dot should not be empty, and it starts with a letter from 
          the latin alphapet ('a'-'z' and 'A'-'Z').
          - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
          Examples:
          file_name_check("example.txt") # => 'Yes'
          file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    examples: []
    tests:
      - input: '"example.txt"'
        output: '''Yes'''
      - input: '"1example.dll"'
        output: '''No'''
      - input: '''s1sdf3.asd'''
        output: '''No'''
      - input: '''K.dll'''
        output: '''Yes'''
      - input: '''MY16FILE3.exe'''
        output: '''Yes'''
      - input: '''His12FILE94.exe'''
        output: '''No'''
      - input: '''_Y.txt'''
        output: '''No'''
      - input: '''?aREYA.exe'''
        output: '''No'''
      - input: '''/this_is_valid.dll'''
        output: '''No'''
      - input: '''this_is_valid.wow'''
        output: '''No'''
      - input: '''this_is_valid.txt'''
        output: '''Yes'''
      - input: '''this_is_valid.txtexe'''
        output: '''No'''
      - input: '''#this2_i4s_5valid.ten'''
        output: '''No'''
      - input: '''@this1_is6_valid.exe'''
        output: '''No'''
      - input: '''this_is_12valid.6exe4.txt'''
        output: '''No'''
      - input: '''all.exe.txt'''
        output: '''No'''
      - input: '''I563_No.exe'''
        output: '''Yes'''
      - input: '''Is3youfault.txt'''
        output: '''Yes'''
      - input: '''no_one#knows.dll'''
        output: '''Yes'''
      - input: '''1I563_Yes3.exe'''
        output: '''No'''
      - input: '''I563_Yes3.txtt'''
        output: '''No'''
      - input: '''final..txt'''
        output: '''No'''
      - input: '''final132'''
        output: '''No'''
      - input: '''_f4indsartal132.'''
        output: '''No'''
      - input: '''.txt'''
        output: '''No'''
      - input: '''s.'''
        output: '''No'''
  - taskId: HumanEval/142
    target: |-
      "
          This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
          multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
          change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
          
          Examples:
          For lst = [1,2,3] the output should be 6
          For lst = []  the output should be 0
          For lst = [-1,-5,2,-1,-5]  the output should be -126
    examples: []
    tests:
      - input: '[1,2,3]'
        output: '6'
      - input: '[1,4,9]'
        output: '14'
      - input: '[]'
        output: '0'
      - input: '[1,1,1,1,1,1,1,1,1]'
        output: '9'
      - input: '[-1,-1,-1,-1,-1,-1,-1,-1,-1]'
        output: '-3'
      - input: '[0]'
        output: '0'
      - input: '[-1,-5,2,-1,-5]'
        output: '-126'
      - input: '[-56,-99,1,0,-2]'
        output: '3030'
      - input: '[-1,0,0,0,0,0,0,0,-1]'
        output: '0'
      - input: '[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]'
        output: '-14196'
      - input: >-
          [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11,
          16, 16, 4, 10]
        output: '-1448'
  - taskId: HumanEval/143
    target: |-
      You are given a string representing a sentence,
          the sentence contains some words separated by a space,
          and you have to return a string that contains the words from the original sentence,
          whose lengths are prime numbers,
          the order of the words in the new string should be the same as the original one.

          Example 1:
              Input: sentence = "This is a test"
              Output: "is"

          Example 2:
              Input: sentence = "lets go for swimming"
              Output: "go for"

          Constraints:
              * 1 <= len(sentence) <= 100
              * sentence contains only letters
    examples: []
    tests:
      - input: '"This is a test"'
        output: '"is"'
      - input: '"lets go for swimming"'
        output: '"go for"'
      - input: '"there is no place available here"'
        output: '"there is no place"'
      - input: '"Hi I am Hussein"'
        output: '"Hi am Hussein"'
      - input: '"go for it"'
        output: '"go for it"'
      - input: '"here"'
        output: '""'
      - input: '"here is"'
        output: '"is"'
  - taskId: HumanEval/144
    target: |-
      Your task is to implement a function that will simplify the expression
          x * n. The function returns True if x * n evaluates to a whole number and False
          otherwise. Both x and n, are string representation of a fraction, and have the following format,
          <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

          You can assume that x, and n are valid fractions, and do not have zero as denominator.

          simplify("1/5", "5/1") = True
          simplify("1/6", "2/1") = False
          simplify("7/10", "10/2") = False
    examples: []
    tests:
      - input: '"1/5", "5/1"'
        output: 'True, ''test1'''
      - input: '"1/6", "2/1"'
        output: 'False, ''test2'''
      - input: '"5/1", "3/1"'
        output: 'True, ''test3'''
      - input: '"7/10", "10/2"'
        output: 'False, ''test4'''
      - input: '"2/10", "50/10"'
        output: 'True, ''test5'''
      - input: '"7/2", "4/2"'
        output: 'True, ''test6'''
      - input: '"11/6", "6/1"'
        output: 'True, ''test7'''
      - input: '"2/3", "5/2"'
        output: 'False, ''test8'''
      - input: '"5/2", "3/5"'
        output: 'False, ''test9'''
      - input: '"2/4", "8/4"'
        output: 'True, ''test10'''
      - input: '"2/4", "4/2"'
        output: 'True, ''test11'''
      - input: '"1/5", "5/1"'
        output: 'True, ''test12'''
      - input: '"1/5", "1/5"'
        output: 'False, ''test13'''
  - taskId: HumanEval/145
    target: |-
      Write a function which sorts the given list of integers
          in ascending order according to the sum of their digits.
          Note: if there are several items with similar sum of their digits,
          order them based on their index in original list.

          For example:
    examples:
      - input: 'order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]'
        output: ''
      - input: 'order_by_points([])'
        output: '[]'
    tests:
      - input: '[1, 11, -1, -11, -12]'
        output: '[-1, -11, 1, -12, 11]'
      - input: '[1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]'
        output: '[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]'
      - input: '[]'
        output: '[]'
      - input: '[1, -11, -32, 43, 54, -98, 2, -3]'
        output: '[-3, -32, -98, -11, 1, 2, 43, 54]'
      - input: '[1,2,3,4,5,6,7,8,9,10,11]'
        output: '[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]'
      - input: '[0,6,6,-76,-21,23,4]'
        output: '[-76, -21, 0, 4, 23, 6, 6]'
  - taskId: HumanEval/146
    target: |-
      Write a function that takes an array of numbers as input and returns 
          the number of elements in the array that are greater than 10 and both 
          first and last digits of a number are odd (1, 3, 5, 7, 9).
          For example:
          specialFilter([15, -73, 14, -15]) => 1 
          specialFilter([33, -2, -3, 45, 21, 109]) => 2
    examples: []
    tests:
      - input: '[5, -2, 1, -5]'
        output: '0  '
      - input: '[15, -73, 14, -15]'
        output: '1'
      - input: '[33, -2, -3, 45, 21, 109]'
        output: '2'
      - input: '[43, -12, 93, 125, 121, 109]'
        output: '4'
      - input: '[71, -2, -33, 75, 21, 19]'
        output: '3'
      - input: '[1]'
        output: '0              '
      - input: '[]'
        output: '0                   '
  - taskId: HumanEval/147
    target: >-
      You are given a positive integer n. You have to create an integer array a
      of length n.
              For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
              Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
          and a[i] + a[j] + a[k] is a multiple of 3.

          Example :
              Input: n = 5
              Output: 1
              Explanation: 
              a = [1, 3, 7, 13, 21]
              The only valid triple is (1, 7, 13).
    examples: []
    tests:
      - input: '5'
        output: '1'
      - input: '6'
        output: '4'
      - input: '10'
        output: '36'
      - input: '100'
        output: '53361'
  - taskId: HumanEval/148
    tests:
      - input: '"Jupiter", "Neptune"'
        output: >-
          ("Saturn", "Uranus"), "First test error: " +
          str(len(candidate("Jupiter", "Neptune")))      
      - input: '"Earth", "Mercury"'
        output: >-
          ("Venus",), "Second test error: " + str(candidate("Earth",
          "Mercury"))  
      - input: '"Mercury", "Uranus"'
        output: >-
          ("Venus", "Earth", "Mars", "Jupiter", "Saturn"), "Third test error: "
          + str(candidate("Mercury", "Uranus"))      
      - input: '"Neptune", "Venus"'
        output: >-
          ("Earth", "Mars", "Jupiter", "Saturn", "Uranus"), "Fourth test error:
          " + str(candidate("Neptune", "Venus"))  
      - input: '"Earth", "Earth"'
        output: ()
      - input: '"Mars", "Earth"'
        output: ()
      - input: '"Jupiter", "Makemake"'
        output: ()
  - taskId: HumanEval/149
    target: |-
      Write a function that accepts a list of strings as a parameter,
          deletes the strings that have odd lengths from it,
          and returns the resulted list with a sorted order,
          The list is always a list of strings and never an array of numbers,
          and it may contain duplicates.
          The order of the list should be ascending by length of each word, and you
          should return the list sorted by that rule.
          If two words have the same length, sort the list alphabetically.
          The function should return a list of strings in sorted order.
          You may assume that all words will have the same length.
          For example:
          assert list_sort(["aa", "a", "aaa"]) => ["aa"]
          assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    examples: []
    tests:
      - input: '["aa", "a", "aaa"]'
        output: '["aa"]'
      - input: '["school", "AI", "asdf", "b"]'
        output: '["AI", "asdf", "school"]'
      - input: '["d", "b", "c", "a"]'
        output: '[]'
      - input: '["d", "dcba", "abcd", "a"]'
        output: '["abcd", "dcba"]'
      - input: '["AI", "ai", "au"]'
        output: '["AI", "ai", "au"]'
      - input: '["a", "b", "b", "c", "c", "a"]'
        output: '[]'
      - input: '[''aaaa'', ''bbbb'', ''dd'', ''cc'']'
        output: '["cc", "dd", "aaaa", "bbbb"]'
  - taskId: HumanEval/150
    target: |-
      A simple program which should return the value of x if n is 
          a prime number and should return the value of y otherwise.

          Examples:
          for x_or_y(7, 34, 12) == 34
          for x_or_y(15, 8, 5) == 5
    examples: []
    tests:
      - input: '7, 34, 12'
        output: '34'
      - input: '15, 8, 5'
        output: '5'
      - input: '3, 33, 5212'
        output: '33'
      - input: '1259, 3, 52'
        output: '3'
      - input: '7919, -1, 12'
        output: '-1'
      - input: '3609, 1245, 583'
        output: '583'
      - input: '91, 56, 129'
        output: '129'
      - input: '6, 34, 1234'
        output: '1234'
      - input: '1, 2, 0'
        output: '0'
      - input: '2, 2, 0'
        output: '2'
  - taskId: HumanEval/151
    tests:
      - input: '[]'
        output: '0 , "This prints if this assert fails 1 (good for debugging!)"'
      - input: '[5, 4]'
        output: '25 , "This prints if this assert fails 2 (good for debugging!)"'
      - input: '[0.1, 0.2, 0.3]'
        output: '0 , "This prints if this assert fails 3 (good for debugging!)"'
      - input: '[-10, -20, -30]'
        output: '0 , "This prints if this assert fails 4 (good for debugging!)"'
      - input: '[-1, -2, 8]'
        output: '0, "This prints if this assert fails 5 (also good for debugging!)"'
      - input: '[0.2, 3, 5]'
        output: '34, "This prints if this assert fails 6 (also good for debugging!)"'
      - input: lst
        output: 'odd_sum , "This prints if this assert fails 7 (good for debugging!)"'
  - taskId: HumanEval/152
    target: |-
      I think we all remember that feeling when the result of some long-awaited
          event is finally known. The feelings and thoughts you have at that moment are
          definitely worth noting down and comparing.
          Your task is to determine if a person correctly guessed the results of a number of matches.
          You are given two arrays of scores and guesses of equal length, where each index shows a match. 
          Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
          the value is 0, and if not, the value is the absolute difference between the guess and the score.
          
          
          example:

          compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
          compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    examples: []
    tests: []
  - taskId: HumanEval/153
    target: |-
      You will be given the name of a class (a string) and a list of extensions.
          The extensions are to be used to load additional classes to the class. The
          strength of the extension is as follows: Let CAP be the number of the uppercase
          letters in the extension's name, and let SM be the number of lowercase letters 
          in the extension's name, the strength is given by the fraction CAP - SM. 
          You should find the strongest extension and return a string in this 
          format: ClassName.StrongestExtensionName.
          If there are two or more extensions with the same strength, you should
          choose the one that comes first in the list.
          For example, if you are given "Slices" as the class and a list of the
          extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
          return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
          (its strength is -1).
          Example:
          for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    examples: []
    tests:
      - input: '''Watashi'', [''tEN'', ''niNE'', ''eIGHt8OKe'']'
        output: '''Watashi.eIGHt8OKe'''
      - input: '''Boku123'', [''nani'', ''NazeDa'', ''YEs.WeCaNe'', ''32145tggg'']'
        output: '''Boku123.YEs.WeCaNe'''
      - input: >-
          '__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',
          '123NoooneB321']
        output: '''__YESIMHERE.NuLl__'''
      - input: '''K'', [''Ta'', ''TAR'', ''t234An'', ''cosSo'']'
        output: '''K.TAR'''
      - input: '''__HAHA'', [''Tab'', ''123'', ''781345'', ''-_-'']'
        output: '''__HAHA.123'''
      - input: '''YameRore'', [''HhAas'', ''okIWILL123'', ''WorkOut'', ''Fails'', ''-_-'']'
        output: '''YameRore.okIWILL123'''
      - input: '''finNNalLLly'', [''Die'', ''NowW'', ''Wow'', ''WoW'']'
        output: '''finNNalLLly.WoW'''
      - input: '''_'', [''Bb'', ''91245'']'
        output: '''_.Bb'''
      - input: '''Sp'', [''671235'', ''Bb'']'
        output: '''Sp.671235'''
  - taskId: HumanEval/154
    target: >-
      You are given 2 words. You need to return True if the second word or any
      of its rotations is a substring in the first word
          cycpattern_check("abcd","abd") => False
          cycpattern_check("hello","ell") => True
          cycpattern_check("whassup","psus") => False
          cycpattern_check("abab","baa") => True
          cycpattern_check("efef","eeff") => False
          cycpattern_check("himenss","simen") => True
    examples: []
    tests: []
  - taskId: HumanEval/155
    target: >-
      Given an integer. return a tuple that has the number of even and odd
      digits respectively.

           Example:
              even_odd_count(-12) ==> (1, 1)
              even_odd_count(123) ==> (1, 2)
    examples: []
    tests:
      - input: '7'
        output: '(0, 1)'
      - input: '-78'
        output: '(1, 1)'
      - input: '3452'
        output: '(2, 2)'
      - input: '346211'
        output: '(3, 3)'
      - input: '-345821'
        output: '(3, 3)'
      - input: '-2'
        output: '(1, 0)'
      - input: '-45347'
        output: '(2, 3)'
      - input: '0'
        output: '(1, 0)'
  - taskId: HumanEval/156
    target: |-
      Given a positive integer, obtain its roman numeral equivalent as a string,
          and return it in lowercase.
          Restrictions: 1 <= num <= 1000

          Examples:
    examples:
      - input: int_to_mini_roman(19) == 'xix'
        output: ''
      - input: int_to_mini_roman(152) == 'clii'
        output: ''
      - input: int_to_mini_roman(426)
        output: '''cdxxvi'''
    tests:
      - input: '19'
        output: '''xix'''
      - input: '152'
        output: '''clii'''
      - input: '251'
        output: '''ccli'''
      - input: '426'
        output: '''cdxxvi'''
      - input: '500'
        output: '''d'''
      - input: '1'
        output: '''i'''
      - input: '4'
        output: '''iv'''
      - input: '43'
        output: '''xliii'''
      - input: '90'
        output: '''xc'''
      - input: '94'
        output: '''xciv'''
      - input: '532'
        output: '''dxxxii'''
      - input: '900'
        output: '''cm'''
      - input: '994'
        output: '''cmxciv'''
      - input: '1000'
        output: '''m'''
  - taskId: HumanEval/157
    tests:
      - input: '3, 4, 5'
        output: 'True, "This prints if this assert fails 1 (good for debugging!)"'
      - input: '1, 2, 3'
        output: 'False'
      - input: '10, 6, 8'
        output: 'True'
      - input: '2, 2, 2'
        output: 'False'
      - input: '7, 24, 25'
        output: 'True'
      - input: '10, 5, 7'
        output: 'False'
      - input: '5, 12, 13'
        output: 'True'
      - input: '15, 8, 17'
        output: 'True'
      - input: '48, 55, 73'
        output: 'True'
      - input: '1, 1, 1'
        output: 'False, "This prints if this assert fails 2 (also good for debugging!)"'
      - input: '2, 2, 10'
        output: 'False'
  - taskId: HumanEval/158
    target: |-
      Write a function that accepts a list of strings.
          The list contains different words. Return the word with maximum number
          of unique characters. If multiple strings have maximum number of unique
          characters, return the one which comes first in lexicographical order.

          find_max(["name", "of", "string"]) == "string"
          find_max(["name", "enam", "game"]) == "enam"
          find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    examples: []
    tests: []
  - taskId: HumanEval/159
    target: >-
      You're a hungry rabbit, and you already have eaten a certain number of
      carrots,
          but now you need to eat more carrots to complete the day's meals.
          you should return an array of [ total number of eaten carrots after your meals,
                                          the number of carrots left after your meals ]
          if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
          
          Example:
          * eat(5, 6, 10) -> [11, 4]
          * eat(4, 8, 9) -> [12, 1]
          * eat(1, 10, 10) -> [11, 0]
          * eat(2, 11, 5) -> [7, 0]
          
          Variables:
          @number : integer
              the number of carrots that you have eaten.
          @need : integer
              the number of carrots that you need to eat.
          @remaining : integer
              the number of remaining carrots thet exist in stock
          
          Constrain:
          * 0 <= number <= 1000
          * 0 <= need <= 1000
          * 0 <= remaining <= 1000

          Have fun :)
    examples: []
    tests:
      - input: '5, 6, 10'
        output: '[11, 4], "Error"'
      - input: '4, 8, 9'
        output: '[12, 1], "Error"'
      - input: '1, 10, 10'
        output: '[11, 0], "Error"'
      - input: '2, 11, 5'
        output: '[7, 0], "Error"'
      - input: '4, 5, 7'
        output: '[9, 2], "Error"'
      - input: '4, 5, 1'
        output: '[5, 0], "Error"'
  - taskId: HumanEval/160
    target: >-
      Given two lists operator, and operand. The first list has basic algebra
      operations, and 
          the second list is a list of integers. Use the two given lists to build the algebric 
          expression and return the evaluation of this expression.

          The basic algebra operations:
          Addition ( + ) 
          Subtraction ( - ) 
          Multiplication ( * ) 
          Floor division ( // ) 
          Exponentiation ( ** ) 

          Example:
          operator['+', '*', '-']
          array = [2, 3, 4, 5]
          result = 2 + 3 * 4 - 5
          => result = 9

          Note:
              The length of operator list is equal to the length of operand list minus one.
              Operand is a list of of non-negative integers.
              Operator list has at least one operator, and operand list has at least two operands.
    examples: []
    tests:
      - input: '[''**'', ''*'', ''+''], [2, 3, 4, 5]'
        output: '37'
      - input: '[''+'', ''*'', ''-''], [2, 3, 4, 5]'
        output: '9'
      - input: '[''//'', ''*''], [7, 3, 4]'
        output: '8, "This prints if this assert fails 1 (good for debugging!)"'
  - taskId: HumanEval/161
    target: |-
      You are given a string s.
          if s[i] is a letter, reverse its case from lower to upper or vise versa, 
          otherwise keep it as it is.
          If the string contains no letters, reverse the string.
          The function should return the resulted string.
          Examples
          solve("1234") = "4321"
          solve("ab") = "AB"
          solve("#a@C") = "#A@c"
    examples: []
    tests:
      - input: '"AsDf"'
        output: '"aSdF"'
      - input: '"1234"'
        output: '"4321"'
      - input: '"ab"'
        output: '"AB"'
      - input: '"#a@C"'
        output: '"#A@c"'
      - input: '"#AsdfW^45"'
        output: '"#aSDFw^45"'
      - input: '"#6@2"'
        output: '"2@6#"'
      - input: '"#$a^D"'
        output: '"#$A^d"'
      - input: '"#ccc"'
        output: '"#CCC"'
  - taskId: HumanEval/162
    target: |-
      Given a string 'text', return its md5 hash equivalent string.
          If 'text' is an empty string, return None.
    examples:
      - input: string_to_md5('Hello world')
        output: '''3e25960a79dbc69b674cd4ec67a72c62'''
    tests:
      - input: '''Hello world'''
        output: '''3e25960a79dbc69b674cd4ec67a72c62'''
      - input: ''''''
        output: None
      - input: '''A B C'''
        output: '''0ef78513b0cb8cef12743f5aeb35f888'''
      - input: '''password'''
        output: '''5f4dcc3b5aa765d61d8327deb882cf99'''
  - taskId: HumanEval/163
    target: |-
      Given two positive integers a and b, return the even digits between a
          and b, in ascending order.

          For example:
          generate_integers(2, 8) => [2, 4, 6, 8]
          generate_integers(8, 2) => [2, 4, 6, 8]
          generate_integers(10, 14) => []
    examples: []
    tests:
      - input: '2, 10'
        output: '[2, 4, 6, 8], "Test 1"'
      - input: '10, 2'
        output: '[2, 4, 6, 8], "Test 2"'
      - input: '132, 2'
        output: '[2, 4, 6, 8], "Test 3"'
      - input: '17,89'
        output: '[], "Test 4"'
