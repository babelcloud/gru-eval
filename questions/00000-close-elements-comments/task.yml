id: 00000-close-elements-comments
question:
  typescript: >
    
    function hasCloseElements(numbers: number[], threshold: number): boolean {
        /* Check if in given list of numbers, are any two numbers closer to each other than
        given threshold.
        >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)
        False
        >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
        True
        */
    }
  python: >
    from typing import List



    def has_close_elements(numbers: List[float], threshold: float) -> bool:
        """ Check if in given list of numbers, are any two numbers closer to each other than
        given threshold.
        >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
        False
        >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
        True
        """
test:
  typescript: >
    
    function check(candidate: (numbers: number[], threshold: number) =>
    boolean): void {
        expect(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)).toBe(true);
        expect(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)).toBe(false);
        expect(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)).toBe(true);
        expect(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)).toBe(false);
        expect(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)).toBe(true);
        expect(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)).toBe(true);
        expect(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)).toBe(false);
    }
  python: |+
    

    def check(candidate):
        assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
        assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
        assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
        assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
        assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
        assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
        assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

difficulty: unclassified
