id: 00010-commentary-snippets
question:
  typescript: ""
  python: >


    def is_palindrome(string: str) -> bool:
        """ Test if given string is a palindrome """
        return string == string[::-1]


    def make_palindrome(string: str) -> str:
        """ Find the shortest palindrome that begins with a supplied string.
        Algorithm idea is simple:
        - Find the longest postfix of supplied string that is a palindrome.
        - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
        >>> make_palindrome('')
        ''
        >>> make_palindrome('cat')
        'catac'
        >>> make_palindrome('cata')
        'catac'
        """
test:
  typescript: ""
  python: |


    def check(candidate):
        assert candidate('') == ''
        assert candidate('x') == 'x'
        assert candidate('xyz') == 'xyzyx'
        assert candidate('xyx') == 'xyx'
        assert candidate('jerry') == 'jerryrrej'
difficulty: unclassified
